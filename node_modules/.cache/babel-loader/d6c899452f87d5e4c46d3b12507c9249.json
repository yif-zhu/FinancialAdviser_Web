{"remainingRequest":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\components\\BaseDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\components\\BaseDialog.vue","mtime":1604281045581},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar Popup = require('element-ui/lib/utils/popup').default;\n\nvar Migrating = require('element-ui/lib/mixins/migrating').default;\n\nvar emitter = require('element-ui/lib/mixins/emitter').default;\n\nvar on = function on(el, event, handle) {\n  if ('addEventListener' in document) {\n    el.addEventListener(event, handle, false);\n  } else {\n    el.attachEvent('on' + event, handle);\n  }\n};\n\nvar off = function off(el, event, handle) {\n  if ('removeEventListener' in document) {\n    el.removeEventListener(event, handle, false);\n  } else {\n    el.detachEvent('on' + event, handle);\n  }\n};\n\nexport default {\n  name: 'BaseDialog',\n  mixins: [Popup, emitter, Migrating],\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    modal: {\n      type: Boolean,\n      default: true\n    },\n    modalAppendToBody: {\n      type: Boolean,\n      default: true\n    },\n    appendToBody: {\n      type: Boolean,\n      default: false\n    },\n    lockScroll: {\n      type: Boolean,\n      default: true\n    },\n    closeOnClickModal: {\n      type: Boolean,\n      default: true\n    },\n    closeOnPressEscape: {\n      type: Boolean,\n      default: true\n    },\n    showClose: {\n      type: Boolean,\n      default: true\n    },\n    showFullscreen: {\n      type: Boolean,\n      default: true\n    },\n    fullscreen: Boolean,\n    width: String,\n    customClass: {\n      type: String,\n      default: ''\n    },\n    top: {\n      type: String,\n      default: '15vh'\n    },\n    beforeClose: Function,\n    center: {\n      type: Boolean,\n      default: false\n    },\n    // 是否允许拖拽\n    draggable: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      closed: false,\n      defaultFullScreen: false,\n      dragData: {\n        // 矩形的X轴\n        rectX: null,\n        // 矩形的Y轴\n        rectY: null,\n        // 当前拖拽点在矩形中的位置\n        dragX: null,\n        // 当前拖拽点在矩形中的位置\n        dragY: null,\n        // 剩余可偏移X轴\n        offsetX: null,\n        // 是否正在拖拽\n        dragging: false\n      }\n    };\n  },\n  watch: {\n    visible: function visible(val) {\n      var _this = this;\n\n      if (val) {\n        this.closed = false;\n        this.$emit('open');\n        this.$el.addEventListener('scroll', this.updatePopper);\n        this.$nextTick(function () {\n          _this.$refs.dialog.scrollTop = 0;\n        });\n\n        if (this.appendToBody) {\n          document.body.appendChild(this.$el);\n        }\n      } else {\n        this.$el.removeEventListener('scroll', this.updatePopper);\n        if (!this.closed) this.$emit('close');\n      }\n    },\n    fullscreen: function fullscreen(val) {\n      if (val) {\n        this.defaultFullScreen = true;\n      }\n    },\n    defaultFullScreen: function defaultFullScreen() {\n      this.$emit('onResize', true);\n    }\n  },\n  computed: {\n    wrapStyle: function wrapStyle() {\n      var style = {};\n\n      if (this.dragData.rectX !== null || this.defaultFullScreen) {\n        style.marginTop = '0';\n      } else {\n        if (this.width) {\n          style.width = this.width;\n        }\n\n        style.marginTop = this.top;\n      }\n\n      return style;\n    },\n    dialogStyle: function dialogStyle() {\n      var style = {};\n\n      if (!this.defaultFullScreen) {\n        if (this.width) {\n          style.width = this.dragData.rectX !== null ? this.width : '100%';\n        }\n\n        if (this.draggable) {\n          if (this.dragData.rectX !== null || this.dragData.rectY !== null) {\n            style.position = 'absolute';\n            style.marginTop = false;\n          }\n\n          if (this.dragData.rectX !== null) style.left = \"\".concat(this.dragData.rectX, \"px\");\n          if (this.dragData.rectY !== null) style.top = \"\".concat(this.dragData.rectY, \"px\");\n        }\n      } else {\n        style.marginTop = false;\n      }\n\n      return style;\n    }\n  },\n  methods: {\n    handleMoveStart: function handleMoveStart(event) {\n      if (!this.draggable) return false; // 屏蔽鼠标右键，没有人会用右键拖拽，除非鼠标坏了\n\n      if (event.button === 2) return false;\n      var dialog = this.$refs.dialog;\n      var rect = dialog.getBoundingClientRect();\n      this.dragData.rectX = rect.x;\n      this.dragData.rectY = rect.y;\n      this.dragData.dragX = event.clientX - rect.x;\n      this.dragData.dragY = event.clientY - rect.y;\n      this.dragData.offsetX = this.$el.clientWidth - dialog.clientWidth;\n      this.dragData.dragging = true;\n      on(window, 'mousemove', this.handleMoveMove);\n      on(window, 'mouseup', this.handleMoveEnd);\n    },\n    handleMoveMove: function handleMoveMove(event) {\n      if (!this.dragData.dragging) return false;\n      var _this$dragData = this.dragData,\n          dragX = _this$dragData.dragX,\n          dragY = _this$dragData.dragY,\n          offsetX = _this$dragData.offsetX;\n      var left = event.clientX - dragX,\n          top = event.clientY - dragY;\n\n      if (left < 0) {\n        left = 0;\n      }\n\n      if (top < 0) {\n        top = 0;\n      }\n\n      if (left > offsetX) {\n        left = offsetX;\n      }\n\n      this.dragData.rectX = left;\n      this.dragData.rectY = top;\n    },\n    handleMoveEnd: function handleMoveEnd() {\n      this.dragData.dragging = false;\n      off(window, 'mousemove', this.handleMoveMove);\n      off(window, 'mouseup', this.handleMoveEnd);\n    },\n    handleWrapperClick: function handleWrapperClick() {\n      if (!this.closeOnClickModal) return;\n      this.handleClose();\n    },\n    handleClose: function handleClose() {\n      if (typeof this.beforeClose === 'function') {\n        this.beforeClose(this.hide);\n      } else {\n        this.hide();\n      }\n    },\n    handleFullscreen: function handleFullscreen() {\n      this.defaultFullScreen = !this.defaultFullScreen;\n      this.$emit('onFullscreen', this.defaultFullScreen);\n    },\n    hide: function hide(cancel) {\n      if (cancel !== false) {\n        this.$emit('update:visible', false);\n        this.$emit('close');\n        this.closed = true;\n\n        if (!this.fullscreen && this.defaultFullScreen) {\n          this.defaultFullScreen = false;\n        }\n      }\n    },\n    updatePopper: function updatePopper() {\n      this.broadcast('ElSelectDropdown', 'updatePopper');\n      this.broadcast('ElDropdownMenu', 'updatePopper');\n    },\n    afterLeave: function afterLeave() {\n      this.$emit('closed');\n    }\n  },\n  mounted: function mounted() {\n    if (this.visible) {\n      this.rendered = true;\n      this.open();\n\n      if (this.appendToBody) {\n        document.body.appendChild(this.$el);\n      }\n    }\n\n    if (this.fullscreen) {\n      this.defaultFullScreen = true;\n    }\n  },\n  destroyed: function destroyed() {\n    // if appendToBody is true, remove DOM node after destroy\n    if (this.appendToBody && this.$el && this.$el.parentNode) {\n      this.$el.parentNode.removeChild(this.$el);\n    }\n  }\n};",{"version":3,"sources":["BaseDialog.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <transition name=\"dialog-fade\"\n            @after-leave=\"afterLeave\">\n        <div class=\"el-dialog__wrapper\"\n             v-show=\"visible\"\n             @click.self=\"handleWrapperClick\">\n            <div class=\"dialog-draggable-wrap\" :style=\"wrapStyle\" :class=\"[{ 'is-fullscreen': defaultFullScreen}]\">\n                <div class=\"el-dialog\"\n                     :class=\"[{ 'is-fullscreen': defaultFullScreen, 'el-dialog--center': center }, customClass]\"\n                     ref=\"dialog\"\n                     :style=\"dialogStyle\">\n                    <div class=\"el-dialog__header is-base-dialog\">\n                        <div class=\"el-dialog__header-inner\"\n                             :class=\"{dragging: draggable && dragData.dragging}\"\n                             @mousedown=\"handleMoveStart\">\n                            <slot name=\"title\">\n                                <span class=\"el-dialog__title\">{{ title }}</span>\n                            </slot>\n                        </div>\n                        <button type=\"button\"\n                                class=\"el-dialog__headerbtn el-dialog__fullscreenbtn\"\n                                aria-label=\"Fullscreen\"\n                                v-if=\"showFullscreen\"\n                                @click=\"handleFullscreen\">\n                            <i class=\"el-dialog__fullscreen el-icon-full-screen\" v-show=\"!defaultFullScreen\"></i>\n                            <i class=\"el-dialog__fullscreen el-icon-copy-document\" v-show=\"defaultFullScreen\"></i>\n                        </button>\n                        <button type=\"button\"\n                                class=\"el-dialog__headerbtn\"\n                                aria-label=\"Close\"\n                                v-if=\"showClose\"\n                                @click=\"handleClose\">\n                            <i class=\"el-dialog__close el-icon el-icon-close\"></i>\n                        </button>\n                    </div>\n                    <div class=\"el-dialog__body\" v-if=\"rendered\"><slot></slot></div>\n                    <div class=\"el-dialog__footer\" v-if=\"$slots.footer\">\n                        <slot name=\"footer\"></slot>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </transition>\n</template>\n\n<script>\n    const Popup = require('element-ui/lib/utils/popup').default;\n    const Migrating = require('element-ui/lib/mixins/migrating').default;\n    const emitter = require('element-ui/lib/mixins/emitter').default;\n\n    const on = function (el, event, handle) {\n        if('addEventListener' in document) {\n            el.addEventListener(event, handle, false);\n        }else{\n            el.attachEvent('on'+event, handle);\n        }\n    };\n\n    const off = function (el, event, handle) {\n        if('removeEventListener' in document) {\n            el.removeEventListener(event, handle, false);\n        }else{\n            el.detachEvent('on'+event, handle);\n        }\n    };\n\n    export default {\n        name: 'BaseDialog',\n\n        mixins: [Popup, emitter, Migrating],\n\n        props: {\n            title: {\n                type: String,\n                default: ''\n            },\n\n            modal: {\n                type: Boolean,\n                default: true\n            },\n\n            modalAppendToBody: {\n                type: Boolean,\n                default: true\n            },\n\n            appendToBody: {\n                type: Boolean,\n                default: false\n            },\n\n            lockScroll: {\n                type: Boolean,\n                default: true\n            },\n\n            closeOnClickModal: {\n                type: Boolean,\n                default: true\n            },\n\n            closeOnPressEscape: {\n                type: Boolean,\n                default: true\n            },\n\n            showClose: {\n                type: Boolean,\n                default: true\n            },\n\n            showFullscreen: {\n                type: Boolean,\n                default: true\n            },\n\n            fullscreen: Boolean,\n\n            width: String,\n\n            customClass: {\n                type: String,\n                default: ''\n            },\n\n            top: {\n                type: String,\n                default: '15vh'\n            },\n            beforeClose: Function,\n            center: {\n                type: Boolean,\n                default: false\n            },\n\n            // 是否允许拖拽\n            draggable: {\n                type: Boolean,\n                default: false\n            },\n        },\n\n        data() {\n            return {\n                closed: false,\n                defaultFullScreen: false,\n                dragData: {\n                    // 矩形的X轴\n                    rectX: null,\n                    // 矩形的Y轴\n                    rectY: null,\n                    // 当前拖拽点在矩形中的位置\n                    dragX: null,\n                    // 当前拖拽点在矩形中的位置\n                    dragY: null,\n                    // 剩余可偏移X轴\n                    offsetX: null,\n                    // 是否正在拖拽\n                    dragging: false\n                }\n            };\n        },\n\n        watch: {\n            visible(val) {\n                if (val) {\n                    this.closed = false;\n                    this.$emit('open');\n                    this.$el.addEventListener('scroll', this.updatePopper);\n                    this.$nextTick(() => {\n                        this.$refs.dialog.scrollTop = 0;\n                    });\n                    if (this.appendToBody) {\n                        document.body.appendChild(this.$el);\n                    }\n                } else {\n                    this.$el.removeEventListener('scroll', this.updatePopper);\n                    if (!this.closed) this.$emit('close');\n                }\n            },\n            fullscreen(val) {\n                if(val) {\n                    this.defaultFullScreen = true;\n                }\n            },\n            defaultFullScreen() {\n                this.$emit('onResize',true);\n            }\n        },\n\n        computed: {\n            wrapStyle() {\n                let style = {};\n\n                if(this.dragData.rectX !== null || this.defaultFullScreen) {\n                    style.marginTop = '0';\n                } else {\n                    if(this.width) {\n                        style.width = this.width;\n                    }\n                    style.marginTop = this.top;\n                }\n                return style;\n            },\n            dialogStyle() {\n                let style = {};\n                if(!this.defaultFullScreen) {\n                    if (this.width) {\n                        style.width = this.dragData.rectX !== null ? this.width : '100%';\n                    }\n                    if (this.draggable) {\n                        if (this.dragData.rectX !== null || this.dragData.rectY !== null) {\n                            style.position = 'absolute';\n                            style.marginTop = false;\n                        }\n                        if (this.dragData.rectX !== null) style.left = `${this.dragData.rectX}px`;\n                        if (this.dragData.rectY !== null) style.top = `${this.dragData.rectY}px`;\n                    }\n                }else{\n                    style.marginTop = false;\n                }\n                return style;\n            }\n        },\n\n        methods: {\n            handleMoveStart (event) {\n                if (!this.draggable) return false;\n                // 屏蔽鼠标右键，没有人会用右键拖拽，除非鼠标坏了\n                if (event.button === 2) return false;\n                const dialog = this.$refs.dialog;\n                const rect = dialog.getBoundingClientRect();\n\n                this.dragData.rectX = rect.x;\n                this.dragData.rectY = rect.y;\n\n                this.dragData.dragX = event.clientX - rect.x;\n                this.dragData.dragY = event.clientY - rect.y;\n\n                this.dragData.offsetX = this.$el.clientWidth - dialog.clientWidth;\n                this.dragData.dragging = true;\n\n                on(window, 'mousemove', this.handleMoveMove);\n                on(window, 'mouseup', this.handleMoveEnd);\n            },\n            handleMoveMove (event) {\n                if (!this.dragData.dragging) return false;\n\n                let {dragX, dragY, offsetX} = this.dragData;\n\n                let left = event.clientX - dragX,\n                    top = event.clientY - dragY;\n\n                if(left < 0) {\n                    left = 0;\n                }\n                if(top < 0) {\n                    top = 0;\n                }\n                if (left > offsetX) {\n                    left = offsetX;\n                }\n\n                this.dragData.rectX = left;\n                this.dragData.rectY = top;\n\n            },\n            handleMoveEnd () {\n                this.dragData.dragging = false;\n                off(window, 'mousemove', this.handleMoveMove);\n                off(window, 'mouseup', this.handleMoveEnd);\n            },\n            handleWrapperClick() {\n                if (!this.closeOnClickModal) return;\n                this.handleClose();\n            },\n            handleClose() {\n                if (typeof this.beforeClose === 'function') {\n                    this.beforeClose(this.hide);\n                } else {\n                    this.hide();\n                }\n            },\n            handleFullscreen() {\n                this.defaultFullScreen = !this.defaultFullScreen;\n                this.$emit('onFullscreen', this.defaultFullScreen);\n            },\n            hide(cancel) {\n                if (cancel !== false) {\n                    this.$emit('update:visible', false);\n                    this.$emit('close');\n                    this.closed = true;\n                    if(!this.fullscreen && this.defaultFullScreen) {\n                        this.defaultFullScreen = false;\n                    }\n                }\n            },\n            updatePopper() {\n                this.broadcast('ElSelectDropdown', 'updatePopper');\n                this.broadcast('ElDropdownMenu', 'updatePopper');\n            },\n            afterLeave() {\n                this.$emit('closed');\n            }\n        },\n\n        mounted() {\n            if (this.visible) {\n                this.rendered = true;\n                this.open();\n                if (this.appendToBody) {\n                    document.body.appendChild(this.$el);\n                }\n            }\n\n            if (this.fullscreen) {\n                this.defaultFullScreen = true;\n            }\n        },\n\n        destroyed() {\n            // if appendToBody is true, remove DOM node after destroy\n            if (this.appendToBody && this.$el && this.$el.parentNode) {\n                this.$el.parentNode.removeChild(this.$el);\n            }\n        }\n    };\n</script>"],"sourceRoot":"src/components"}]}