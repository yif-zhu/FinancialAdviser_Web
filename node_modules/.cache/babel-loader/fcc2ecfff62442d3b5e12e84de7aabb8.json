{"remainingRequest":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\components\\BaseDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\components\\BaseDialog.vue","mtime":1604281045581},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar Popup = require('element-ui/lib/utils/popup').default;\n\nvar Migrating = require('element-ui/lib/mixins/migrating').default;\n\nvar emitter = require('element-ui/lib/mixins/emitter').default;\n\nvar on = function on(el, event, handle) {\n  if ('addEventListener' in document) {\n    el.addEventListener(event, handle, false);\n  } else {\n    el.attachEvent('on' + event, handle);\n  }\n};\n\nvar off = function off(el, event, handle) {\n  if ('removeEventListener' in document) {\n    el.removeEventListener(event, handle, false);\n  } else {\n    el.detachEvent('on' + event, handle);\n  }\n};\n\nexport default {\n  name: 'BaseDialog',\n  mixins: [Popup, emitter, Migrating],\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    modal: {\n      type: Boolean,\n      default: true\n    },\n    modalAppendToBody: {\n      type: Boolean,\n      default: true\n    },\n    appendToBody: {\n      type: Boolean,\n      default: false\n    },\n    lockScroll: {\n      type: Boolean,\n      default: true\n    },\n    closeOnClickModal: {\n      type: Boolean,\n      default: true\n    },\n    closeOnPressEscape: {\n      type: Boolean,\n      default: true\n    },\n    showClose: {\n      type: Boolean,\n      default: true\n    },\n    showFullscreen: {\n      type: Boolean,\n      default: true\n    },\n    fullscreen: Boolean,\n    width: String,\n    customClass: {\n      type: String,\n      default: ''\n    },\n    top: {\n      type: String,\n      default: '15vh'\n    },\n    beforeClose: Function,\n    center: {\n      type: Boolean,\n      default: false\n    },\n    // 是否允许拖拽\n    draggable: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      closed: false,\n      defaultFullScreen: false,\n      dragData: {\n        // 矩形的X轴\n        rectX: null,\n        // 矩形的Y轴\n        rectY: null,\n        // 当前拖拽点在矩形中的位置\n        dragX: null,\n        // 当前拖拽点在矩形中的位置\n        dragY: null,\n        // 剩余可偏移X轴\n        offsetX: null,\n        // 是否正在拖拽\n        dragging: false\n      }\n    };\n  },\n  watch: {\n    visible: function visible(val) {\n      var _this = this;\n\n      if (val) {\n        this.closed = false;\n        this.$emit('open');\n        this.$el.addEventListener('scroll', this.updatePopper);\n        this.$nextTick(function () {\n          _this.$refs.dialog.scrollTop = 0;\n        });\n\n        if (this.appendToBody) {\n          document.body.appendChild(this.$el);\n        }\n      } else {\n        this.$el.removeEventListener('scroll', this.updatePopper);\n        if (!this.closed) this.$emit('close');\n      }\n    },\n    fullscreen: function fullscreen(val) {\n      if (val) {\n        this.defaultFullScreen = true;\n      }\n    },\n    defaultFullScreen: function defaultFullScreen() {\n      this.$emit('onResize', true);\n    }\n  },\n  computed: {\n    wrapStyle: function wrapStyle() {\n      var style = {};\n\n      if (this.dragData.rectX !== null || this.defaultFullScreen) {\n        style.marginTop = '0';\n      } else {\n        if (this.width) {\n          style.width = this.width;\n        }\n\n        style.marginTop = this.top;\n      }\n\n      return style;\n    },\n    dialogStyle: function dialogStyle() {\n      var style = {};\n\n      if (!this.defaultFullScreen) {\n        if (this.width) {\n          style.width = this.dragData.rectX !== null ? this.width : '100%';\n        }\n\n        if (this.draggable) {\n          if (this.dragData.rectX !== null || this.dragData.rectY !== null) {\n            style.position = 'absolute';\n            style.marginTop = false;\n          }\n\n          if (this.dragData.rectX !== null) style.left = \"\".concat(this.dragData.rectX, \"px\");\n          if (this.dragData.rectY !== null) style.top = \"\".concat(this.dragData.rectY, \"px\");\n        }\n      } else {\n        style.marginTop = false;\n      }\n\n      return style;\n    }\n  },\n  methods: {\n    handleMoveStart: function handleMoveStart(event) {\n      if (!this.draggable) return false; // 屏蔽鼠标右键，没有人会用右键拖拽，除非鼠标坏了\n\n      if (event.button === 2) return false;\n      var dialog = this.$refs.dialog;\n      var rect = dialog.getBoundingClientRect();\n      this.dragData.rectX = rect.x;\n      this.dragData.rectY = rect.y;\n      this.dragData.dragX = event.clientX - rect.x;\n      this.dragData.dragY = event.clientY - rect.y;\n      this.dragData.offsetX = this.$el.clientWidth - dialog.clientWidth;\n      this.dragData.dragging = true;\n      on(window, 'mousemove', this.handleMoveMove);\n      on(window, 'mouseup', this.handleMoveEnd);\n    },\n    handleMoveMove: function handleMoveMove(event) {\n      if (!this.dragData.dragging) return false;\n      var _this$dragData = this.dragData,\n          dragX = _this$dragData.dragX,\n          dragY = _this$dragData.dragY,\n          offsetX = _this$dragData.offsetX;\n      var left = event.clientX - dragX,\n          top = event.clientY - dragY;\n\n      if (left < 0) {\n        left = 0;\n      }\n\n      if (top < 0) {\n        top = 0;\n      }\n\n      if (left > offsetX) {\n        left = offsetX;\n      }\n\n      this.dragData.rectX = left;\n      this.dragData.rectY = top;\n    },\n    handleMoveEnd: function handleMoveEnd() {\n      this.dragData.dragging = false;\n      off(window, 'mousemove', this.handleMoveMove);\n      off(window, 'mouseup', this.handleMoveEnd);\n    },\n    handleWrapperClick: function handleWrapperClick() {\n      if (!this.closeOnClickModal) return;\n      this.handleClose();\n    },\n    handleClose: function handleClose() {\n      if (typeof this.beforeClose === 'function') {\n        this.beforeClose(this.hide);\n      } else {\n        this.hide();\n      }\n    },\n    handleFullscreen: function handleFullscreen() {\n      this.defaultFullScreen = !this.defaultFullScreen;\n      this.$emit('onFullscreen', this.defaultFullScreen);\n    },\n    hide: function hide(cancel) {\n      if (cancel !== false) {\n        this.$emit('update:visible', false);\n        this.$emit('close');\n        this.closed = true;\n\n        if (!this.fullscreen && this.defaultFullScreen) {\n          this.defaultFullScreen = false;\n        }\n      }\n    },\n    updatePopper: function updatePopper() {\n      this.broadcast('ElSelectDropdown', 'updatePopper');\n      this.broadcast('ElDropdownMenu', 'updatePopper');\n    },\n    afterLeave: function afterLeave() {\n      this.$emit('closed');\n    }\n  },\n  mounted: function mounted() {\n    if (this.visible) {\n      this.rendered = true;\n      this.open();\n\n      if (this.appendToBody) {\n        document.body.appendChild(this.$el);\n      }\n    }\n\n    if (this.fullscreen) {\n      this.defaultFullScreen = true;\n    }\n  },\n  destroyed: function destroyed() {\n    // if appendToBody is true, remove DOM node after destroy\n    if (this.appendToBody && this.$el && this.$el.parentNode) {\n      this.$el.parentNode.removeChild(this.$el);\n    }\n  }\n};",null]}