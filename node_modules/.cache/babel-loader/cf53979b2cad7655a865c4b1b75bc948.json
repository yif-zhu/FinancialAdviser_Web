{"remainingRequest":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\store\\modules\\dynamicTabs.js","dependencies":[{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\store\\modules\\dynamicTabs.js","mtime":1604281046845},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* 动态标签栏 */\nexport default {\n  state: {\n    currentTab: null,\n    currentTabIndex: '',\n    tabs: [],\n    cacheTabs: [],\n    // 组件缓存\n    tabIndex: 0,\n    isActivated: false\n  },\n  mutations: {\n    // 新增或更新\n    addTab: function addTab(state, payload) {\n      if (_typeof(payload) !== 'object') return; // 默认自动打开\n\n      if (typeof payload.autoOpen === 'undefined') payload.autoOpen = true; // 默认允许关闭\n\n      if (typeof payload.closable === 'undefined') payload.closable = true;\n\n      if (payload.id === undefined) {\n        payload.id = ++state.tabIndex + '';\n      } else {\n        payload.id = payload.id + '';\n      }\n\n      var len = state.tabs.length;\n\n      for (var i = 0; i < len; i++) {\n        var tab = state.tabs[i];\n\n        if (tab.id !== undefined && tab.id === payload.id) {\n          if (payload.title) tab.title = payload.title;\n          if (payload.name) tab.name = payload.name;\n\n          if (tab.params !== undefined && payload.params !== undefined) {\n            // 相当于路由params属性\n            tab.params = payload.params;\n          }\n\n          if (tab.autoOpen) {\n            state.currentTab = tab;\n            state.currentTabIndex = tab.id;\n          }\n\n          return;\n        }\n      }\n\n      state.tabs.push(payload); // 在router-view模式下是否缓存（for keep-alive）\n\n      if (payload.isCache && state.cacheTabs.indexOf(payload.id) === -1) {\n        state.cacheTabs.push(payload.id);\n      }\n\n      if (payload.autoOpen) {\n        state.currentTab = payload;\n        state.currentTabIndex = payload.id;\n      }\n    },\n    setTab: function setTab(state, payload) {\n      if (_typeof(payload) !== 'object') return;\n      var len = state.tabs.length;\n\n      for (var i = 0; i < len; i++) {\n        var tab = state.tabs[i];\n\n        if (tab.id !== undefined && tab.id === payload.id) {\n          tab.name = payload.name;\n        }\n      }\n    },\n    setCurrentTab: function setCurrentTab(state, payload) {\n      if (_typeof(payload) !== 'object') return;\n      state.currentTab = payload;\n    },\n    setCurrentTabIndex: function setCurrentTabIndex(state, payload) {\n      state.currentTabIndex = payload;\n    },\n    // 本地缓存\n    setCacheTabs: function setCacheTabs(state) {\n      localStorage.setItem('dynamicTabs', JSON.stringify(state));\n    },\n    removeCacheTabs: function removeCacheTabs() {\n      localStorage.removeItem('dynamicTabs');\n    },\n    removeTab: function removeTab(state, id) {\n      if (typeof id !== 'string') id = id.toString();\n      var len = state.tabs.length;\n\n      for (var i = 0; i < len; i++) {\n        var tab = state.tabs[i];\n\n        if (tab.id === id) {\n          if (state.currentTabIndex === id) {\n            var nextTab = state.tabs[i + 1] || state.tabs[i - 1];\n\n            if (nextTab) {\n              state.currentTab = nextTab;\n              state.currentTabIndex = nextTab.id;\n            }\n          }\n\n          if (tab.isCache) {\n            var cacheIndex = state.cacheTabs.indexOf(tab.id);\n\n            if (cacheIndex > -1) {\n              state.cacheTabs.splice(cacheIndex, 1);\n            }\n          }\n\n          state.tabs.splice(i, 1);\n          return;\n        }\n      }\n    },\n    setAllTabs: function setAllTabs(state) {\n      var tabs = localStorage.getItem('dynamicTabs');\n      var payload = typeof tabs === 'string' ? JSON.parse(tabs) : null;\n      if (!payload) return;\n      state.tabs = payload.tabs;\n      state.cacheTabs = payload.cacheTabs;\n      state.currentTab = payload.currentTab;\n      state.currentTabIndex = payload.currentTabIndex;\n      state.tabIndex = payload.tabIndex; // 动态标签是新鲜的 （此属性用于拿到最新tabs数据后做一些新增操作）\n\n      state.isActivated = true;\n    },\n    removeAllTabs: function removeAllTabs(state) {\n      state.tabs = [];\n      state.cacheTabs = [];\n      state.currentTab = null;\n      state.currentTabIndex = '';\n      state.tabIndex = 0; // 动态标签凋谢了\n\n      state.isActivated = false;\n    }\n  }\n};",null]}