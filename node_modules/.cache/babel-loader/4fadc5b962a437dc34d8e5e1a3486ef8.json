{"remainingRequest":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\components\\product\\RepaymentMatrix.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\components\\product\\RepaymentMatrix.vue","mtime":1604281046595},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport utilsIndex from '@/utils/index.js';\nexport default {\n  name: \"RepaymentMatrix\",\n  props: {\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      layers: [],\n      computedLayers: [],\n      layeredInfoStyles: {\n        top: 0,\n        left: 0,\n        display: 'none'\n      },\n      layeredInfo: {\n        name: '',\n        offerAmount: '',\n        closingBalance: '',\n        closingBalanceRate: '',\n        remainingPercent: 0,\n        offerAmountPercent: 0\n      }\n    };\n  },\n  created: function created() {\n    this.initLayer();\n  },\n  methods: {\n    initLayer: function initLayer() {\n      var totalOfferAmount = 0;\n      this.data.forEach(function (v) {\n        console.log(v);\n        totalOfferAmount += parseFloat(v.OfferAmount);\n      });\n      var layers = {};\n      var layerColors = ['#759ae4', '#5566ce', '#01d5bf', '#00c673', '#bfd52a', '#f19603', '#a36fff'];\n      this.data.forEach(function (v, i) {\n        var offerAmount = v.OfferAmount ? parseFloat(v.OfferAmount) : 0;\n        var offerAmounts = v.OfferAmount ? utilsIndex.numUnit(v.OfferAmount) : 0;\n        var payAmount = v.PayAmount ? parseFloat(v.PayAmount) : 0;\n        var closingBalance = v.ClosingBalance ? utilsIndex.numUnit(v.ClosingBalance) : 0;\n        var closingBalanceRate = v.ClosingBalanceRate ? parseFloat(v.ClosingBalanceRate) : 0;\n        var payAmountPercent = payAmount / offerAmount * 100;\n        var offerAmountPercent = offerAmount / totalOfferAmount * 100;\n        var currentLayer = {\n          name: v.ShortName,\n          className: v.ClassName,\n          payAmountPercent: payAmountPercent,\n          payAmountStyle: {\n            height: payAmountPercent + '%'\n          },\n          offerAmountPercent: offerAmountPercent,\n          offerAmountStyle: {\n            width: '100%',\n            backgroundColor: layerColors[i]\n          },\n          text: (v.ClassName ? v.ClassName : '未知') + ' ' + Math.round(offerAmountPercent) + '%',\n          offerAmounts: offerAmounts,\n          closingBalance: closingBalance,\n          closingBalanceRate: closingBalanceRate,\n          remainingPercent: closingBalance / offerAmount,\n          value: offerAmount\n        };\n        if (!layers[v.ClassName]) layers[v.ClassName] = [];\n        layers[v.ClassName].push(currentLayer);\n      });\n      var computedLayers = [];\n      var freePercent = 100;\n\n      var fixedPercent = function fixedPercent(percent, freeCount) {\n        var o = 100 / 6;\n\n        if (percent <= o) {\n          freePercent -= o;\n          return o + '%';\n        }\n\n        if (percent === 100) return '100%';\n        var currentPercent = percent - percent % o;\n\n        if (freePercent <= currentPercent) {\n          return freePercent + '%';\n        } else {\n          freePercent -= currentPercent;\n\n          if (freeCount > 1) {\n            var needMinPercent = freeCount * o;\n\n            if (freePercent < needMinPercent) {\n              currentPercent = currentPercent - (needMinPercent - freePercent);\n              freePercent = freePercent + (needMinPercent - freePercent);\n            }\n          }\n\n          if (freePercent > o && freeCount === 1) {\n            var needFloatPercent = freePercent - o;\n            currentPercent += needFloatPercent;\n            freePercent += needFloatPercent;\n          }\n\n          return currentPercent + '%';\n        }\n      };\n\n      layers = Object.values(layers);\n      var totalCount = layers.length;\n      layers.forEach(function (layer, i) {\n        var count = layer.length;\n        var height = 0;\n\n        if (count > 1) {\n          var totalPercent = layer.map(function (v) {\n            return v.offerAmountPercent;\n          }).reduce(function (prev, next) {\n            return prev + next;\n          });\n          layer.forEach(function (v) {\n            v.offerAmountStyle.width = v.offerAmountPercent / totalPercent * 100 + '%';\n          });\n          height = totalPercent;\n        } else {\n          height = layer[0].offerAmountPercent;\n        }\n\n        computedLayers.push({\n          height: fixedPercent(height, totalCount - (i + 1)),\n          layer: layer,\n          backgroundColor: layerColors[i]\n        });\n      });\n      this.computedLayers = computedLayers;\n      this.layers = layers;\n    },\n    showInfo: function showInfo(event, item) {\n      //console.log(e)\n      var evt = event.target;\n      var actualLeft = evt.offsetLeft + evt.offsetWidth / 4;\n      var actualTop = evt.offsetTop + evt.offsetHeight / 2 + 10;\n      var current = evt.offsetParent;\n\n      while (current !== null && current !== this.$el) {\n        actualTop += current.offsetTop;\n        actualLeft += current.offsetLeft;\n        current = current.offsetParent;\n      }\n\n      if (actualLeft >= 130) {\n        actualLeft -= this.$el.offsetWidth - 130;\n      }\n\n      this.layeredInfoStyles = {\n        left: actualLeft + 'px',\n        top: actualTop + 'px',\n        display: 'block'\n      };\n      this.layeredInfo = item;\n    },\n    hideInfo: function hideInfo(event) {\n      //console.log('out', event)\n      var evt = event.toElement;\n\n      if (!this.$el.contains(evt)) {\n        this.layeredInfoStyles.display = 'none';\n      }\n    }\n  }\n};",null]}