{"remainingRequest":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\components\\common\\Pager.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\components\\common\\Pager.vue","mtime":1604548661873},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from 'vuex';\nexport default {\n  name: 'Pager',\n  props: {\n    conname: {\n      type: String,\n      required: true\n    },\n    procname: {\n      type: String,\n      required: true\n    },\n    tablename: {\n      type: String,\n      required: true\n    },\n    filter: {\n      type: String\n    },\n    order: {\n      type: String\n    },\n    dataloaded: {\n      type: Function,\n      required: true\n    },\n    loadingswitcher: {\n      type: Function\n    },\n    pageSize: {\n      type: Number,\n      default: 20\n    },\n    needUserName: {\n      type: Boolean,\n      default: false\n    },\n    bondCode: {\n      type: String,\n      default: ''\n    },\n    trustId: {\n      type: [Number, String],\n      default: 0\n    }\n  },\n  data: function data() {\n    return {\n      current: 1,\n      total: 0,\n      size: 0\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapState(['locale'])), mapState('user', ['userName'])),\n  watch: {\n    filter: function filter(newValue, oldValue) {\n      if (this.loadingswitcher && typeof this.loadingswitcher === 'function') {\n        this.loadingswitcher(true);\n      }\n\n      this.current = 1;\n      this.getListWithPager();\n    },\n    bondCode: function bondCode(newValue, oldValue) {\n      if (this.loadingswitcher && typeof this.loadingswitcher === 'function') {\n        this.loadingswitcher(true);\n      }\n\n      this.current = 1;\n      this.getListWithPager();\n    },\n    order: function order(newValue, oldValue) {\n      if (this.loadingswitcher && typeof this.loadingswitcher === 'function') {\n        this.loadingswitcher(true);\n      }\n\n      this.getListWithPager();\n    },\n    pageSize: function pageSize(v) {\n      this.size = v;\n    }\n  },\n  mounted: function mounted() {\n    this.size = this.pageSize;\n\n    switch (this.procname) {\n      case 'Product':\n        this.getListWithProduct();\n        break;\n\n      case 'Industry':\n        this.getListWithIndustry();\n        break;\n\n      case 'Report':\n        this.getListWithReport();\n        break;\n\n      case 'User':\n        this.getListWithUser();\n        break;\n\n      case 'Role':\n        this.getListWithRole();\n        break;\n\n      case 'Enterprise':\n        this.getListWithEnterprise();\n        break;\n\n      case 'Log':\n        this.getListWithLog();\n        break;\n\n      default:\n        this.getListWithProduct();\n    }\n  },\n  methods: {\n    getListWithProduct: function getListWithProduct() {\n      var _this = this;\n\n      var self = this;\n      var start = (this.current - 1) * this.size + 1;\n      var end = this.current * this.size;\n      var whstring = ''; //var whstring = \"AliasSet=N'\" + this.locale + \"'\";\n\n      if (this.filter) {\n        whstring += whstring ? ' and ' + this.filter : this.filter;\n      }\n\n      var svc = '';\n\n      if (self.needUserName) {\n        svc = this.$http(self.conname, \"DV.GetListWithPagerAndUserName\");\n      } else {\n        svc = this.$http(self.conname, \"DV.GetListWithPager\");\n      }\n\n      svc.AddParam({\n        Name: \"tableOrView\",\n        Value: self.tablename,\n        DBType: \"string\"\n      });\n      svc.AddParam({\n        Name: \"start\",\n        Value: start,\n        DBType: \"int\"\n      });\n      svc.AddParam({\n        Name: \"end\",\n        Value: end,\n        DBType: \"int\"\n      });\n\n      if (self.order) {\n        svc.AddParam({\n          Name: \"orderby\",\n          Value: self.order,\n          DBType: \"string\"\n        });\n      }\n\n      svc.AddParam({\n        Name: \"where\",\n        Value: whstring,\n        DBType: \"string\"\n      });\n      svc.AddParam({\n        Name: 'total',\n        Value: '0',\n        DBType: 'int',\n        IsOutput: true,\n        Size: 100\n      });\n\n      if (self.needUserName) {\n        svc.AddParam({\n          Name: \"UserName\",\n          Value: self.userName,\n          DBType: \"string\"\n        });\n      }\n\n      if (self.bondCode.trim()) {\n        svc.AddParam({\n          Name: \"ItemValue\",\n          Value: self.bondCode,\n          DBType: \"string\"\n        });\n      }\n\n      svc.ExecTable().then(function (ress) {\n        if (ress) {\n          var res = {};\n\n          if (_this.trustId) {\n            res.data = ress.data.filter(function (item) {\n              return item.TrustId !== Number(_this.trustId);\n            });\n            res.total = ress.total > 0 ? ress.total - 1 : ress.total;\n          } else {\n            res = ress;\n          } //console.log(res)\n\n\n          self.total = parseInt(res.total);\n          self.dataloaded(res.data, res.total);\n\n          if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n            self.loadingswitcher(false);\n          }\n\n          self.$emit('tableScroll');\n        }\n      });\n    },\n    getListWithIndustry: function getListWithIndustry() {\n      var _this2 = this;\n\n      var self = this;\n      var start = (this.current - 1) * this.size + 1;\n      var end = this.current * this.size;\n      var whstring = ''; //var whstring = \"AliasSet=N'\" + this.locale + \"'\";\n\n      if (this.filter) {\n        whstring += whstring ? ' and ' + this.filter : this.filter;\n      }\n\n      var svc = '';\n\n      if (self.needUserName) {\n        svc = this.$http(self.conname, \"DV.GetListWithPagerAndUserName\");\n      } else {\n        svc = this.$http(self.conname, \"DV.GetListWithPager\");\n      }\n\n      svc.AddParam({\n        Name: \"tableOrView\",\n        Value: self.tablename,\n        DBType: \"string\"\n      });\n      svc.AddParam({\n        Name: \"start\",\n        Value: start,\n        DBType: \"int\"\n      });\n      svc.AddParam({\n        Name: \"end\",\n        Value: end,\n        DBType: \"int\"\n      });\n\n      if (self.order) {\n        svc.AddParam({\n          Name: \"orderby\",\n          Value: self.order,\n          DBType: \"string\"\n        });\n      }\n\n      svc.AddParam({\n        Name: \"where\",\n        Value: whstring,\n        DBType: \"string\"\n      });\n      svc.AddParam({\n        Name: 'total',\n        Value: '0',\n        DBType: 'int',\n        IsOutput: true,\n        Size: 100\n      });\n\n      if (self.needUserName) {\n        svc.AddParam({\n          Name: \"UserName\",\n          Value: self.userName,\n          DBType: \"string\"\n        });\n      }\n\n      if (self.bondCode.trim()) {\n        svc.AddParam({\n          Name: \"ItemValue\",\n          Value: self.bondCode,\n          DBType: \"string\"\n        });\n      }\n\n      svc.ExecTable().then(function (ress) {\n        if (ress) {\n          var res = {};\n\n          if (_this2.trustId) {\n            res.data = ress.data.filter(function (item) {\n              return item.TrustId !== Number(_this2.trustId);\n            });\n            res.total = ress.total > 0 ? ress.total - 1 : ress.total;\n          } else {\n            res = ress;\n          } //console.log(res)\n\n\n          self.total = parseInt(res.total);\n          self.dataloaded(res.data, res.total);\n\n          if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n            self.loadingswitcher(false);\n          }\n\n          self.$emit('tableScroll');\n        }\n      });\n    },\n    getListWithReport: function getListWithReport() {\n      var _this3 = this;\n\n      var self = this;\n      var start = (this.current - 1) * this.size + 1;\n      var end = this.current * this.size;\n      var whstring = ''; //var whstring = \"AliasSet=N'\" + this.locale + \"'\";\n\n      if (this.filter) {\n        whstring += whstring ? ' and ' + this.filter : this.filter;\n      }\n\n      var svc = '';\n\n      if (self.needUserName) {\n        svc = this.$http(self.conname, \"DV.GetListWithPagerAndUserName\");\n      } else {\n        svc = this.$http(self.conname, \"DV.GetListWithPager\");\n      }\n\n      svc.AddParam({\n        Name: \"tableOrView\",\n        Value: self.tablename,\n        DBType: \"string\"\n      });\n      svc.AddParam({\n        Name: \"start\",\n        Value: start,\n        DBType: \"int\"\n      });\n      svc.AddParam({\n        Name: \"end\",\n        Value: end,\n        DBType: \"int\"\n      });\n\n      if (self.order) {\n        svc.AddParam({\n          Name: \"orderby\",\n          Value: self.order,\n          DBType: \"string\"\n        });\n      }\n\n      svc.AddParam({\n        Name: \"where\",\n        Value: whstring,\n        DBType: \"string\"\n      });\n      svc.AddParam({\n        Name: 'total',\n        Value: '0',\n        DBType: 'int',\n        IsOutput: true,\n        Size: 100\n      });\n\n      if (self.needUserName) {\n        svc.AddParam({\n          Name: \"UserName\",\n          Value: self.userName,\n          DBType: \"string\"\n        });\n      }\n\n      if (self.bondCode.trim()) {\n        svc.AddParam({\n          Name: \"ItemValue\",\n          Value: self.bondCode,\n          DBType: \"string\"\n        });\n      }\n\n      svc.ExecTable().then(function (ress) {\n        if (ress) {\n          var res = {};\n\n          if (_this3.trustId) {\n            res.data = ress.data.filter(function (item) {\n              return item.TrustId !== Number(_this3.trustId);\n            });\n            res.total = ress.total > 0 ? ress.total - 1 : ress.total;\n          } else {\n            res = ress;\n          } //console.log(res)\n\n\n          self.total = parseInt(res.total);\n          self.dataloaded(res.data, res.total);\n\n          if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n            self.loadingswitcher(false);\n          }\n\n          self.$emit('tableScroll');\n        }\n      });\n    },\n    getListWithUser: function getListWithUser() {\n      var _this4 = this;\n\n      var self = this;\n      var start = (this.current - 1) * this.size + 1;\n      var end = this.current * this.size;\n      var whstring = ''; //var whstring = \"AliasSet=N'\" + this.locale + \"'\";\n\n      if (this.filter) {\n        whstring += whstring ? ' and ' + this.filter : this.filter;\n      }\n\n      var svc = '';\n      svc = this.$http(self.conname, \"dbo.usp_GetListWithPager\");\n      svc.AddParam({\n        Name: \"tableOrView\",\n        Value: self.tablename,\n        DBType: \"string\"\n      });\n      svc.AddParam({\n        Name: \"start\",\n        Value: start,\n        DBType: \"int\"\n      });\n      svc.AddParam({\n        Name: \"end\",\n        Value: end,\n        DBType: \"int\"\n      });\n\n      if (self.order) {\n        svc.AddParam({\n          Name: \"orderby\",\n          Value: self.order,\n          DBType: \"string\"\n        });\n      }\n\n      svc.AddParam({\n        Name: \"where\",\n        Value: whstring,\n        DBType: \"string\"\n      });\n      svc.AddParam({\n        Name: 'total',\n        Value: '0',\n        DBType: 'int',\n        IsOutput: true,\n        Size: 100\n      });\n      svc.ExecTable().then(function (ress) {\n        if (ress) {\n          var res = {};\n\n          if (_this4.trustId) {\n            res.data = ress.data.filter(function (item) {\n              return item.TrustId !== Number(_this4.trustId);\n            });\n            res.total = ress.total > 0 ? ress.total - 1 : ress.total;\n          } else {\n            res = ress;\n          } //console.log(res)\n\n\n          self.total = parseInt(res.total);\n          self.dataloaded(res.data, res.total);\n\n          if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n            self.loadingswitcher(false);\n          }\n\n          self.$emit('tableScroll');\n        }\n      });\n    },\n    getListWithRole: function getListWithRole() {\n      var _this5 = this;\n\n      var self = this;\n      var start = (this.current - 1) * this.size + 1;\n      var end = this.current * this.size;\n      var whstring = ''; //var whstring = \"AliasSet=N'\" + this.locale + \"'\";\n\n      if (this.filter) {\n        whstring += whstring ? ' and ' + this.filter : this.filter;\n      }\n\n      var svc = '';\n\n      if (self.needUserName) {\n        svc = this.$http(self.conname, \"DV.GetListWithPagerAndUserName\");\n      } else {\n        svc = this.$http(self.conname, \"DV.GetListWithPager\");\n      }\n\n      svc.AddParam({\n        Name: \"tableOrView\",\n        Value: self.tablename,\n        DBType: \"string\"\n      });\n      svc.AddParam({\n        Name: \"start\",\n        Value: start,\n        DBType: \"int\"\n      });\n      svc.AddParam({\n        Name: \"end\",\n        Value: end,\n        DBType: \"int\"\n      });\n\n      if (self.order) {\n        svc.AddParam({\n          Name: \"orderby\",\n          Value: self.order,\n          DBType: \"string\"\n        });\n      }\n\n      svc.AddParam({\n        Name: \"where\",\n        Value: whstring,\n        DBType: \"string\"\n      });\n      svc.AddParam({\n        Name: 'total',\n        Value: '0',\n        DBType: 'int',\n        IsOutput: true,\n        Size: 100\n      });\n\n      if (self.needUserName) {\n        svc.AddParam({\n          Name: \"UserName\",\n          Value: self.userName,\n          DBType: \"string\"\n        });\n      }\n\n      if (self.bondCode.trim()) {\n        svc.AddParam({\n          Name: \"ItemValue\",\n          Value: self.bondCode,\n          DBType: \"string\"\n        });\n      }\n\n      svc.ExecTable().then(function (ress) {\n        if (ress) {\n          var res = {};\n\n          if (_this5.trustId) {\n            res.data = ress.data.filter(function (item) {\n              return item.TrustId !== Number(_this5.trustId);\n            });\n            res.total = ress.total > 0 ? ress.total - 1 : ress.total;\n          } else {\n            res = ress;\n          } //console.log(res)\n\n\n          self.total = parseInt(res.total);\n          self.dataloaded(res.data, res.total);\n\n          if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n            self.loadingswitcher(false);\n          }\n\n          self.$emit('tableScroll');\n        }\n      });\n    },\n    getListWithEnterprise: function getListWithEnterprise() {\n      var _this6 = this;\n\n      var self = this;\n      var start = (this.current - 1) * this.size + 1;\n      var end = this.current * this.size;\n      var whstring = ''; //var whstring = \"AliasSet=N'\" + this.locale + \"'\";\n\n      if (this.filter) {\n        whstring += whstring ? ' and ' + this.filter : this.filter;\n      }\n\n      var svc = '';\n\n      if (self.needUserName) {\n        svc = this.$http(self.conname, \"DV.GetListWithPagerAndUserName\");\n      } else {\n        svc = this.$http(self.conname, \"DV.GetListWithPager\");\n      }\n\n      svc.AddParam({\n        Name: \"tableOrView\",\n        Value: self.tablename,\n        DBType: \"string\"\n      });\n      svc.AddParam({\n        Name: \"start\",\n        Value: start,\n        DBType: \"int\"\n      });\n      svc.AddParam({\n        Name: \"end\",\n        Value: end,\n        DBType: \"int\"\n      });\n\n      if (self.order) {\n        svc.AddParam({\n          Name: \"orderby\",\n          Value: self.order,\n          DBType: \"string\"\n        });\n      }\n\n      svc.AddParam({\n        Name: \"where\",\n        Value: whstring,\n        DBType: \"string\"\n      });\n      svc.AddParam({\n        Name: 'total',\n        Value: '0',\n        DBType: 'int',\n        IsOutput: true,\n        Size: 100\n      });\n\n      if (self.needUserName) {\n        svc.AddParam({\n          Name: \"UserName\",\n          Value: self.userName,\n          DBType: \"string\"\n        });\n      }\n\n      if (self.bondCode.trim()) {\n        svc.AddParam({\n          Name: \"ItemValue\",\n          Value: self.bondCode,\n          DBType: \"string\"\n        });\n      }\n\n      svc.ExecTable().then(function (ress) {\n        if (ress) {\n          var res = {};\n\n          if (_this6.trustId) {\n            res.data = ress.data.filter(function (item) {\n              return item.TrustId !== Number(_this6.trustId);\n            });\n            res.total = ress.total > 0 ? ress.total - 1 : ress.total;\n          } else {\n            res = ress;\n          } //console.log(res)\n\n\n          self.total = parseInt(res.total);\n          self.dataloaded(res.data, res.total);\n\n          if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n            self.loadingswitcher(false);\n          }\n\n          self.$emit('tableScroll');\n        }\n      });\n    },\n    getListWithLog: function getListWithLog() {\n      var _this7 = this;\n\n      var self = this;\n      var start = (this.current - 1) * this.size + 1;\n      var end = this.current * this.size;\n      var whstring = ''; //var whstring = \"AliasSet=N'\" + this.locale + \"'\";\n\n      if (this.filter) {\n        whstring += whstring ? ' and ' + this.filter : this.filter;\n      }\n\n      var svc = '';\n\n      if (self.needUserName) {\n        svc = this.$http(self.conname, \"DV.GetListWithPagerAndUserName\");\n      } else {\n        svc = this.$http(self.conname, \"DV.GetListWithPager\");\n      }\n\n      svc.AddParam({\n        Name: \"tableOrView\",\n        Value: self.tablename,\n        DBType: \"string\"\n      });\n      svc.AddParam({\n        Name: \"start\",\n        Value: start,\n        DBType: \"int\"\n      });\n      svc.AddParam({\n        Name: \"end\",\n        Value: end,\n        DBType: \"int\"\n      });\n\n      if (self.order) {\n        svc.AddParam({\n          Name: \"orderby\",\n          Value: self.order,\n          DBType: \"string\"\n        });\n      }\n\n      svc.AddParam({\n        Name: \"where\",\n        Value: whstring,\n        DBType: \"string\"\n      });\n      svc.AddParam({\n        Name: 'total',\n        Value: '0',\n        DBType: 'int',\n        IsOutput: true,\n        Size: 100\n      });\n\n      if (self.needUserName) {\n        svc.AddParam({\n          Name: \"UserName\",\n          Value: self.userName,\n          DBType: \"string\"\n        });\n      }\n\n      if (self.bondCode.trim()) {\n        svc.AddParam({\n          Name: \"ItemValue\",\n          Value: self.bondCode,\n          DBType: \"string\"\n        });\n      }\n\n      svc.ExecTable().then(function (ress) {\n        if (ress) {\n          var res = {};\n\n          if (_this7.trustId) {\n            res.data = ress.data.filter(function (item) {\n              return item.TrustId !== Number(_this7.trustId);\n            });\n            res.total = ress.total > 0 ? ress.total - 1 : ress.total;\n          } else {\n            res = ress;\n          } //console.log(res)\n\n\n          self.total = parseInt(res.total);\n          self.dataloaded(res.data, res.total);\n\n          if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n            self.loadingswitcher(false);\n          }\n\n          self.$emit('tableScroll');\n        }\n      });\n    },\n    pageSizeChange: function pageSizeChange(size) {\n      if (this.loadingswitcher && typeof this.loadingswitcher === 'function') {\n        this.loadingswitcher(true);\n      }\n\n      this.size = size;\n      this.current = 1;\n      this.getListWithPager();\n    },\n    pageIndexChange: function pageIndexChange(index) {\n      if (this.loadingswitcher && typeof this.loadingswitcher === 'function') {\n        this.loadingswitcher(true);\n      }\n\n      this.current = index;\n      this.getListWithPager();\n    }\n  }\n};",null]}