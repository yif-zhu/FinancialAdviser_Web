{"remainingRequest":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\api\\FileService.js","dependencies":[{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\api\\FileService.js","mtime":1604281044718},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport paramsBuilder from './ParamsBuilder.js';\nimport enchelper from '../utils/encryptHelper.js';\nimport { FileOperationServiceUrl } from '../utils/config.js';\n\nfunction jsFormSubmit(targetUrl, param) {\n  var tempform = document.createElement(\"form\");\n  tempform.action = targetUrl;\n  tempform.method = \"post\";\n  var platform = process.env.VUE_APP_Platform;\n\n  if ('linux' === platform) {\n    tempform.enctype = \"multipart/form-data\";\n  }\n\n  tempform.style.display = \"none\";\n\n  for (var x in param) {\n    var _opt = document.createElement(\"input\");\n\n    _opt.name = x;\n    _opt.value = param[x];\n    tempform.appendChild(_opt);\n  }\n\n  var opt = document.createElement(\"input\");\n  opt.type = \"submit\";\n  tempform.appendChild(opt);\n  document.body.appendChild(tempform);\n  tempform.submit();\n  document.body.removeChild(tempform);\n}\n\nexport default {\n  Upload: function Upload(fileData, fileName, folder, toFTP) {\n    var argsObj = {\n      'Name': fileName,\n      'Folder': folder,\n      'IsFTP': toFTP ? true : false\n    };\n    console.log(argsObj);\n    var formData = new FormData();\n    formData.append(\"file\", fileData);\n    var args = JSON.stringify(argsObj);\n    var svcUrl = FileOperationServiceUrl + 'Upload?args=' + enchelper.EncryptForGetRequest(args);\n    return axios({\n      method: 'post',\n      url: svcUrl,\n      headers: {\n        'Content-Type': 'multipart/form-data; boundary=----' + +new Date()\n      },\n      data: process.env.VUE_APP_Platform === 'win' ? fileData : formData\n    }).then(function (res) {\n      return Promise.resolve(process.env.VUE_APP_Platform === 'win' ? res.data : {\n        UploadResult: res.data\n      });\n    }).catch(function (thrown) {\n      if (axios.isCancel(thrown)) {\n        console.log('Request canceled');\n      }\n    });\n  },\n  UploadOther: function UploadOther(fileData, fileName, folder, toFTP) {\n    var formData = new FormData();\n    formData.append(\"file\", fileData);\n    var argsObj = {\n      'Name': fileName,\n      'Folder': folder,\n      'IsFTP': toFTP ? true : false\n    };\n    console.log(argsObj);\n    var args = JSON.stringify(argsObj);\n    var svcUrl = FileOperationServiceUrl + 'Upload?args=' + enchelper.EncryptForGetRequest(args);\n    return function (progress, callback) {\n      var CancelToken = axios.CancelToken;\n      var source = CancelToken.source();\n      return axios({\n        method: 'post',\n        url: svcUrl,\n        headers: {\n          'Content-Type': 'multipart/form-data; boundary=----' + +new Date()\n        },\n        data: process.env.VUE_APP_Platform === 'win' ? fileData : formData,\n        cancelToken: source.token,\n        onUploadProgress: function onUploadProgress(progressEvent) {\n          if (progress) progress(progressEvent);\n        }\n      }).then(function (res) {\n        console.log(res.data);\n        if (callback) callback(process.env.VUE_APP_Platform === 'win' ? res.data : {\n          UploadResult: res.data\n        });\n      }); //return source.cancel;\n    };\n  },\n  // 上传文件(支持上传进度、取消上传）\n  UploadFile: function UploadFile(fileData, fileName, folder, toFTP) {\n    var argsObj = {\n      'Name': fileName,\n      'Folder': folder,\n      'IsFTP': toFTP ? true : false\n    };\n    console.log(argsObj);\n    var args = JSON.stringify(argsObj);\n    var svcUrl = FileOperationServiceUrl + 'Upload?args=' + enchelper.EncryptForGetRequest(args);\n    return function (progress, callback) {\n      var CancelToken = axios.CancelToken;\n      var source = CancelToken.source();\n      axios({\n        method: 'post',\n        url: svcUrl,\n        data: fileData,\n        cancelToken: source.token,\n        onUploadProgress: function onUploadProgress(progressEvent) {\n          if (progress) progress(progressEvent);\n        }\n      }).then(function (res) {\n        if (callback) callback(res.data);\n      }).catch(function (thrown) {\n        if (axios.isCancel(thrown)) {\n          console.log('Request canceled');\n        }\n      });\n      return source.cancel;\n    };\n  },\n  LoadText: function LoadText(fileRelativePath) {\n    var svcUrl = FileOperationServiceUrl + 'LoadContent';\n    return axios({\n      method: 'post',\n      url: svcUrl,\n      data: {\n        'filePath': enchelper.Encrypt(fileRelativePath)\n      }\n    }).then(function (res) {\n      return Promise.resolve(res.data);\n    });\n  },\n  UpdateText: function UpdateText(fileRelativePath, fileContent) {\n    var svcUrl = FileOperationServiceUrl + 'UpdateContent';\n    return axios({\n      method: 'post',\n      url: svcUrl,\n      data: {\n        'filePath': enchelper.Encrypt(fileRelativePath),\n        'fileContent': fileContent\n      }\n    }).then(function (res) {\n      return Promise.resolve(res.data);\n    });\n  },\n  CopyFolder: function CopyFolder(sourceFolder, destFolder) {\n    var svcUrl = FileOperationServiceUrl + 'CopyFolder';\n    return axios({\n      method: 'post',\n      url: svcUrl,\n      data: {\n        'sourceFolder': enchelper.Encrypt(sourceFolder),\n        'destFolder': enchelper.Encrypt(destFolder)\n      }\n    }).then(function (res) {\n      return Promise.resolve(res.data);\n    });\n  },\n  Remove: function Remove(fileRelativePath, isFTP) {\n    var svcUrl = FileOperationServiceUrl + 'Remove';\n    var argsObj = {\n      'Path': fileRelativePath,\n      'IsFTP': isFTP ? true : false\n    };\n    console.log(argsObj);\n    var args = JSON.stringify(argsObj);\n    return axios({\n      method: 'post',\n      url: svcUrl,\n      data: {\n        'args': enchelper.Encrypt(args)\n      }\n    }).then(function (res) {\n      return Promise.resolve(res.data);\n    });\n  },\n  DownLoadFileByPath: function DownLoadFileByPath(fileRelativePath, renameTo, fromFTP) {\n    var serviceUrl = FileOperationServiceUrl + 'Download';\n    var fileName = renameTo;\n\n    if (!renameTo || renameTo.length < 3) {\n      fileName = fileRelativePath.substring(fileRelativePath.lastIndexOf('\\\\') + 1);\n    }\n\n    var argsObj = {\n      'Name': fileName,\n      'Path': fileRelativePath,\n      'IsFTP': fromFTP ? true : false\n    };\n    console.log(argsObj);\n    var args = JSON.stringify(argsObj);\n    var param = {\n      'args': enchelper.Encrypt(args)\n    };\n    jsFormSubmit(serviceUrl, param);\n  },\n  Export: function Export(connName, spName) {\n    paramsBuilder.call(this, connName, spName);\n\n    this.ExportExcelFile = function (excelName) {\n      var serviceUrl = FileOperationServiceUrl + 'ExportExcel';\n      var dbParams = this.PrepareparamObj();\n      var argsObj = {\n        'Name': excelName,\n        'Conn': connName,\n        'Params': dbParams\n      };\n      console.log(argsObj);\n      var args = JSON.stringify(argsObj);\n      var param = {\n        'args': enchelper.Encrypt(args)\n      };\n      jsFormSubmit(serviceUrl, param);\n    };\n  }\n};",null]}