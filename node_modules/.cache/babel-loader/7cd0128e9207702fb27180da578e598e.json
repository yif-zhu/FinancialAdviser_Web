{"remainingRequest":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\App.vue","mtime":1604281044593},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState, mapMutations, mapActions } from \"vuex\";\nexport default {\n  computed: _objectSpread({}, mapState([\"redirect\", \"showIndicator\", \"taskProcessUrl\", \"taskProcessCallback\"])),\n  methods: _objectSpread(_objectSpread(_objectSpread({}, mapMutations([\"setRedirect\", \"setIndicatorStatus\"])), mapActions(\"user\", [\"getUserInfo\"])), {}, {\n    handleClose: function handleClose() {\n      // 关闭运行窗口时执行task回调\n      this.setIndicatorStatus(false);\n      this.taskProcessCallback();\n    }\n  }),\n  watch: {\n    // 自定义跳转\n    redirect: function redirect(to, from) {\n      if (to !== \"\" && to !== from) {\n        if (to.toLowerCase() === \"/login\") {\n          var path = ''; // 多个接口同时返回错误导致跳转失败，所以先清空跳转\n\n          this.setRedirect('');\n\n          if (process.env.VUE_APP_CUSTOMER && process.env.VUE_APP_CUSTOMER === 'huatai') {\n            // 华泰需要免登录\n            path = '/vvauto-login';\n          } else {\n            path = '/login';\n          } // 防止重复添加redirectUrl\n\n\n          if (!this.$route.query.redirectURL) {\n            this.$router.push({\n              path: path,\n              query: {\n                redirectURL: this.$router.currentRoute.fullPath\n              }\n            });\n          }\n        } else {\n          this.$router.push(to);\n        }\n      }\n    }\n  },\n  mounted: function mounted() {\n    // 第一次进来去缓存里取登录信息\n    this.getUserInfo();\n  }\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SACA,QADA,EAEA,YAFA,EAGA,UAHA,QAIA,MAJA;AAMA,eAAA;AACA,EAAA,QAAA,oBACA,QAAA,CAAA,CAAA,UAAA,EAAA,eAAA,EAAA,gBAAA,EAAA,qBAAA,CAAA,CADA,CADA;AAIA,EAAA,OAAA,gDACA,YAAA,CAAA,CAAA,aAAA,EAAA,oBAAA,CAAA,CADA,GAEA,UAAA,CAAA,MAAA,EAAA,CAAA,aAAA,CAAA,CAFA;AAGA,IAAA,WAHA,yBAGA;AACA;AACA,WAAA,kBAAA,CAAA,KAAA;AACA,WAAA,mBAAA;AACA;AAPA,IAJA;AAaA,EAAA,KAAA,EAAA;AACA;AACA,IAAA,QAFA,oBAEA,EAFA,EAEA,IAFA,EAEA;AACA,UAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,IAAA,EAAA;AACA,YAAA,EAAA,CAAA,WAAA,OAAA,QAAA,EAAA;AACA,cAAA,IAAA,GAAA,EAAA,CADA,CAEA;;AACA,eAAA,WAAA,CAAA,EAAA;;AACA,cAAA,OAAA,CAAA,GAAA,CAAA,gBAAA,IAAA,OAAA,CAAA,GAAA,CAAA,gBAAA,KAAA,QAAA,EAAA;AACA;AACA,YAAA,IAAA,GAAA,eAAA;AACA,WAHA,MAGA;AACA,YAAA,IAAA,GAAA,QAAA;AACA,WATA,CAUA;;;AACA,cAAA,CAAA,KAAA,MAAA,CAAA,KAAA,CAAA,WAAA,EAAA;AACA,iBAAA,OAAA,CAAA,IAAA,CAAA;AACA,cAAA,IAAA,EAAA,IADA;AAEA,cAAA,KAAA,EAAA;AACA,gBAAA,WAAA,EAAA,KAAA,OAAA,CAAA,YAAA,CAAA;AADA;AAFA,aAAA;AAMA;AACA,SAnBA,MAmBA;AACA,eAAA,OAAA,CAAA,IAAA,CAAA,EAAA;AACA;AACA;AACA;AA3BA,GAbA;AA0CA,EAAA,OA1CA,qBA0CA;AACA;AACA,SAAA,WAAA;AACA;AA7CA,CAAA","sourcesContent":["<style lang=\"scss\">\n  #app{\n    height: 100%;\n    // background: linear-gradient(#2b3daf 60%, #fff );\n  }\n</style>\n<template>\n  <div id=\"app\">\n    <router-view></router-view>\n    <BaseDialog title=\"任务处理\"\n                width=\"450px\"\n                top=\"10vh\"\n                :visible=\"showIndicator\"\n                :close-on-click-modal=\"false\"\n                :draggable=\"true\"\n                ref=\"taskProcess\"\n                v-if=\"showIndicator\"\n                append-to-body\n                @close=\"handleClose\">\n      <div class=\"taskProcess-window\">\n        <iframe :src=\"taskProcessUrl\" frameborder=\"0\" id=\"Task_Indicator_Page\"></iframe>\n      </div>\n    </BaseDialog>\n  </div>\n</template>\n\n<script>\n  import {\n    mapState,\n    mapMutations,\n    mapActions\n  } from \"vuex\";\n\n  export default {\n    computed: {\n      ...mapState([\"redirect\", \"showIndicator\", \"taskProcessUrl\", \"taskProcessCallback\"])\n    },\n    methods: {\n      ...mapMutations([\"setRedirect\", \"setIndicatorStatus\"]),\n      ...mapActions(\"user\", [\"getUserInfo\"]),\n      handleClose() {\n        // 关闭运行窗口时执行task回调\n        this.setIndicatorStatus(false);\n        this.taskProcessCallback();\n      },\n    },\n    watch: {\n      // 自定义跳转\n      redirect(to, from) {\n        if (to !== \"\" && to !== from) {\n          if (to.toLowerCase() === \"/login\") {\n            let path = '';\n            // 多个接口同时返回错误导致跳转失败，所以先清空跳转\n            this.setRedirect('');\n            if (process.env.VUE_APP_CUSTOMER && process.env.VUE_APP_CUSTOMER === 'huatai') {\n              // 华泰需要免登录\n              path = '/vvauto-login';\n            }else{\n              path = '/login';\n            }\n            // 防止重复添加redirectUrl\n            if(!this.$route.query.redirectURL) {\n              this.$router.push({\n                path: path,\n                query: {\n                  redirectURL: this.$router.currentRoute.fullPath\n                }\n              });\n            }\n          } else {\n            this.$router.push(to);\n          }\n        }\n      }\n    },\n    mounted() {\n      // 第一次进来去缓存里取登录信息\n      this.getUserInfo();\n    }\n  }\n</script>\n"],"sourceRoot":"src"}]}