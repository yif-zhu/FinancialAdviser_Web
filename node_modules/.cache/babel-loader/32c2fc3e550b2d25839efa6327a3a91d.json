{"remainingRequest":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\utils\\encryptHelper.js","dependencies":[{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\utils\\encryptHelper.js","mtime":1604660712415},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["var NodeRSA = require('node-rsa');\n\nvar pubkey = '-----BEGIN PUBLIC KEY-----MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALeu8Z0punQqy1K6iUCYC2BsLvqJ2OGBdJo06B6oN4qlMjzZ2TQMoyYFNsDElLeTaNjnD65yVTTxm4FrhbP6pd0CAwEAAQ==-----END PUBLIC KEY-----'; // const pubkey = '-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCjAMflsWyhhm0wzpwDft52VA71uf0ma7/IM2AKRz7CEaAmQgsIK3xtf/teNU0IYkNU2/H2kQbaoiDFNyOEZE57ymD0IP9rljoTxUbG8HmCLmsw5Fmmh1RUMkq9BxSJMdosqdJwZE1B16XIJGSK+QcCP/1Wf4pQxLy+REAtsNj1rQIDAQAB-----END PUBLIC KEY-----';\n\nexport default {\n  Encrypt: function Encrypt(plainText) {\n    var key = new NodeRSA(pubkey);\n    key.setOptions({\n      encryptionScheme: 'pkcs1'\n    });\n    return key.encrypt(plainText, 'base64');\n  },\n  // Encrypt:function(plainText){\n  //   var publicKey = \"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALeu8Z0punQqy1K6iUCYC2BsLvqJ2OGBdJo06B6oN4qlMjzZ2TQMoyYFNsDElLeTaNjnD65yVTTxm4FrhbP6pd0CAwEAAQ==\";\n  //   var encrypt = new JSEncrypt();\n  //   encrypt.setPublicKey(publicKey);\n  //   return encrypt.encrypt(plainText);\n  // },\n  EncryptForGetRequest: function EncryptForGetRequest(plainText) {\n    var ciphertext = this.Encrypt(plainText);\n    return ciphertext.replace(/#/g, \"%23\").replace(/%/g, \"%25\").replace(/&/g, \"%26\").replace(/\\+/g, \"%2B\").replace(/\\//g, \"%2F\").replace(/\\\\/g, \"%5C\").replace(/=/g, \"%3D\").replace(/\\?/g, \"%3F\").replace(/\\./g, \"%2E\");\n  }\n};",{"version":3,"sources":["C:/Users/yif_z/Desktop/DealViewer/src/utils/encryptHelper.js"],"names":["NodeRSA","require","pubkey","Encrypt","plainText","key","setOptions","encryptionScheme","encrypt","EncryptForGetRequest","ciphertext","replace"],"mappings":"AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAMC,MAAM,GAAG,oLAAf,C,CACA;;AACA,eAAe;AAEbC,EAAAA,OAAO,EAAC,iBAASC,SAAT,EAAmB;AACzB,QAAMC,GAAG,GAAG,IAAIL,OAAJ,CAAYE,MAAZ,CAAZ;AACAG,IAAAA,GAAG,CAACC,UAAJ,CAAe;AAACC,MAAAA,gBAAgB,EAAE;AAAnB,KAAf;AACA,WAAOF,GAAG,CAACG,OAAJ,CAAYJ,SAAZ,EAAuB,QAAvB,CAAP;AACD,GANY;AAOb;AACA;AACA;AACA;AACA;AACA;AAEAK,EAAAA,oBAda,gCAcQL,SAdR,EAckB;AAC7B,QAAIM,UAAU,GAAG,KAAKP,OAAL,CAAaC,SAAb,CAAjB;AACA,WAAOM,UAAU,CAACC,OAAX,CAAmB,IAAnB,EAAwB,KAAxB,EACJA,OADI,CACI,IADJ,EACS,KADT,EAEJA,OAFI,CAEI,IAFJ,EAES,KAFT,EAGJA,OAHI,CAGI,KAHJ,EAGU,KAHV,EAIJA,OAJI,CAII,KAJJ,EAIU,KAJV,EAKJA,OALI,CAKI,KALJ,EAKU,KALV,EAMJA,OANI,CAMI,IANJ,EAMS,KANT,EAOJA,OAPI,CAOI,KAPJ,EAOU,KAPV,EAQJA,OARI,CAQI,KARJ,EAQU,KARV,CAAP;AASD;AAzBY,CAAf","sourcesContent":["const NodeRSA = require('node-rsa');\n\nconst pubkey = '-----BEGIN PUBLIC KEY-----MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALeu8Z0punQqy1K6iUCYC2BsLvqJ2OGBdJo06B6oN4qlMjzZ2TQMoyYFNsDElLeTaNjnD65yVTTxm4FrhbP6pd0CAwEAAQ==-----END PUBLIC KEY-----';\n// const pubkey = '-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCjAMflsWyhhm0wzpwDft52VA71uf0ma7/IM2AKRz7CEaAmQgsIK3xtf/teNU0IYkNU2/H2kQbaoiDFNyOEZE57ymD0IP9rljoTxUbG8HmCLmsw5Fmmh1RUMkq9BxSJMdosqdJwZE1B16XIJGSK+QcCP/1Wf4pQxLy+REAtsNj1rQIDAQAB-----END PUBLIC KEY-----';\nexport default {\n\n  Encrypt:function(plainText){\n    const key = new NodeRSA(pubkey);\n    key.setOptions({encryptionScheme: 'pkcs1'})\n    return key.encrypt(plainText, 'base64');\n  },\n  // Encrypt:function(plainText){\n  //   var publicKey = \"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALeu8Z0punQqy1K6iUCYC2BsLvqJ2OGBdJo06B6oN4qlMjzZ2TQMoyYFNsDElLeTaNjnD65yVTTxm4FrhbP6pd0CAwEAAQ==\";\n  //   var encrypt = new JSEncrypt();\n  //   encrypt.setPublicKey(publicKey);\n  //   return encrypt.encrypt(plainText);\n  // },\n\n  EncryptForGetRequest(plainText){\n    let ciphertext = this.Encrypt(plainText);\n    return ciphertext.replace(/#/g,\"%23\")\n      .replace(/%/g,\"%25\")\n      .replace(/&/g,\"%26\")\n      .replace(/\\+/g,\"%2B\")\n      .replace(/\\//g,\"%2F\")\n      .replace(/\\\\/g,\"%5C\")\n      .replace(/=/g,\"%3D\")\n      .replace(/\\?/g,\"%3F\")\n      .replace(/\\./g,\"%2E\");\n  }\n}\n"]}]}