{"remainingRequest":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\components\\layout\\AppHeader.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\components\\layout\\AppHeader.vue","mtime":1604574326447},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import dataGrid from '@/components/common/DataGrid.vue';\nimport userImg from '@/assets/images/user.png';\nimport { mapState, mapMutations, mapMutions } from 'vuex';\nimport md5 from 'js-md5';\nexport default {\n  name: \"AppHeader\",\n  data: function data() {\n    var validator = function validator(rule, value, callback) {\n      var test = /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,20}$/;\n\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      } else if (!test.test(value)) {\n        callback(new Error('密码长度为8-20位，必须包括字母、数字'));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      active: '1',\n      userImg: userImg,\n      modifyPasswordDialog: false,\n      passwordForm: {\n        oldPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      },\n      passwordRules: {\n        newPassword: [{\n          validator: validator,\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          validator: validator,\n          trigger: 'blur'\n        }]\n      },\n      passwordErrors: {\n        oldPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      },\n      activeRead: 'unread',\n      listOrder: 'TrustId desc',\n      listFilter: 'IsConcerned=1',\n      showTips: false,\n      showColorsEgg: false,\n      versionName: 'Kookaburra',\n      total: 0,\n      currentPage: 1,\n      pagesize: 10,\n      filterCheckType: '',\n      tableData: [],\n      CUSTOMER: process.env.VUE_APP_CUSTOMER,\n      showFollows: false\n    };\n  },\n  components: {// dataGrid\n  },\n  computed: _objectSpread(_objectSpread({}, mapState('user', ['userName', 'isRoot'])), {}, {\n    ConcernTrust: function ConcernTrust() {\n      return this.$store.state.productInfo.ConcernTrust;\n    }\n  }),\n  watch: {\n    ConcernTrust: function ConcernTrust(v) {\n      if (this.$refs.refDataGrid) this.$refs.refDataGrid.refresh();\n    }\n  },\n  created: function created() {\n    this.ConcernTrust_Get();\n  },\n  methods: _objectSpread(_objectSpread({}, mapMutations(['setLoginStatus', 'productInfo/setProductDetail', 'productInfo/setConcernTrust'])), {}, {\n    ConcernTrust_Get: function ConcernTrust_Get() {\n      var self = this;\n      var svc = this.$http('PortfolioManagement', 'DV.UserConcernTrust_Get');\n      svc.AddParam({\n        Name: 'UserName',\n        Value: self.userName,\n        DBType: 'string'\n      });\n      svc.ExecTable().then(function (res) {\n        self['productInfo/setConcernTrust'](res);\n      });\n    },\n    handleModifyUserPassword: function handleModifyUserPassword() {\n      var _this = this;\n\n      var $form = this.$refs.passwordForm;\n      $form.validate(function (valid) {\n        if (valid) {\n          var _this$passwordForm = _this.passwordForm,\n              oldPassword = _this$passwordForm.oldPassword,\n              newPassword = _this$passwordForm.newPassword,\n              confirmPassword = _this$passwordForm.confirmPassword;\n\n          if (oldPassword === newPassword) {\n            _this.passwordErrors.newPassword = '请设置一个新的密码!';\n            return;\n          }\n\n          if (newPassword !== confirmPassword) {\n            _this.passwordErrors.confirmPassword = '两次输入的密码不一致!';\n            return;\n          }\n\n          var svc = _this.$http('UserManagement', 'QuickFrame.usp_ChangePasswordWithResult');\n\n          svc.AddParam({\n            Name: \"UserName\",\n            Value: _this.userName,\n            DBType: \"string\"\n          });\n          svc.AddParam({\n            Name: \"OldPassword\",\n            Value: md5(oldPassword),\n            DBType: \"string\"\n          });\n          svc.AddParam({\n            Name: \"NewPassword\",\n            Value: md5(newPassword),\n            DBType: \"string\"\n          });\n          svc.ExecResult().then(function (res) {\n            if (res == 1) {\n              _this.passwordErrors.oldPassword = '原密码不正确!';\n            } else {\n              _this.$message.success('恭喜您，密码修改成功!');\n\n              _this.modifyPasswordDialog = false;\n              $form.resetFields();\n              $form.clearValidate();\n            }\n          });\n        }\n      });\n    },\n    handleSetting: function handleSetting(type) {\n      var _this2 = this;\n\n      switch (type) {\n        case 'admin':\n          this.$router.push('/Admin');\n          break;\n\n        case 'logout':\n          this.$store.dispatch('user/handleUserLogout').then(function () {\n            _this2.$router.push('/login');\n\n            _this2.setLoginStatus(false);\n          });\n          break;\n\n        case 'modifyPassword':\n          this.modifyPasswordDialog = true;\n      } //alert(type)\n\n    },\n    handleSizeChange: function handleSizeChange(size) {\n      this.pagesize = size;\n      var currentPage = this.currentPage;\n      var pagesize = this.pagesize;\n      this.tableData = this.$allTableData.slice((currentPage - 1) * pagesize, currentPage * pagesize);\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.currentPage = val;\n      var currentPage = this.currentPage;\n      var pagesize = this.pagesize;\n      this.tableData = this.$allTableData.slice((currentPage - 1) * pagesize, currentPage * pagesize);\n    },\n    moreFocusFun: function moreFocusFun() {\n      this.$router.push({\n        path: '/ProductFocus/ProductList'\n      });\n    }\n  })\n};",null]}