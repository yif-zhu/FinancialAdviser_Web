{"remainingRequest":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\views\\Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\views\\Login.vue","mtime":1604316944697},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport md5 from 'js-md5';\nimport cookie from '@/utils/cookie.js';\nimport keys from '@/utils/keys.js';\nimport {\n  mapState,\n  mapGetters,\n  mapActions\n} from 'vuex';\nimport { BasePath } from '@/utils/config.js';\nconst captchaUrl = BasePath + 'Services/AuthenticationService.svc/Captcha';\nexport default {\n  name: \"Login\",\n  data() {\n    const validator = (rule, value, callback) => {\n      let test = /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,20}$/;\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      }else if (!(test.test(value))) {\n        callback(new Error('密码长度为6-20位，必须包括字母、数字'));\n      } else {\n        callback();\n      }\n    };\n    const validatorC = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入确认密码'));\n      }else if (value != validator) {\n        callback(new Error('确认密码与密码不相符'));\n      } else {\n        callback();\n      }\n    };\n  const checkPhone = (rule, value, callback) => {\n    let test = /^1[3456789]\\d{9}$/;\n    if(value === '') {\n      callback(new Error('手机号码'));\n    }else if(!test.test(value)){\n      callback(new Error('请输入有效手机号'));\n    }else{\n      callback();\n    }\n  };\n  const checkEMail = (rule, value, callback) => {\n    let test = /^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$/;\n    if(value === '') {\n      callback(new Error('请输入邮箱地址'));\n    }else if(!test.test(value)){\n      callback(new Error('请输入有效邮箱地址'));\n    }else{\n      callback();\n    }\n  };\n  const checkUserName = (rule, value, callback) => {\n    if(value === '') {\n      callback(new Error('请输入用户名'));\n    }else{\n      callback();\n    }\n  };\n    return {\n      captcha: captchaUrl,\n      form: {\n        email: '',\n        password: '',\n        captcha: ''\n      },\n      isLoginT:true,\n      rules: {\n        email: [{\n          required: true,\n          message: '请输入用户名或邮箱',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        },{\n          type: 'string',\n          min: 6,\n          message: '密码不能少于6位',\n          trigger: 'blur'\n        }],\n        captcha: [{\n          required: true,\n          message: '请输入验证码',\n          trigger: 'blur'\n        }]\n      },\n      errorMsg: '',\n      captionErrorMsg: '',\n      submitStatus: false,\n      backgroundDiv: {\n          backgroundImage: 'url(' + require('@/assets/images/loginBg.jpg') + ')'\n      },\n      createUserForm: {\n        userName: '',\n        phone:'',\n        password: '',\n        passwordConfirm: '',\n        EMail:''\n      },\n      createUserRules: {\n      userName: [\n        { validator: checkUserName, trigger: 'blur' }\n      ],\n      password: [\n        { validator, trigger: 'blur' }\n      ],\n      passwordConfirm: [\n        { validatorC, trigger: 'blur' }\n      ],\n      phone: [\n        { validator: checkPhone, trigger: 'blur' }\n      ],\n      EMail: [\n        { validator: checkEMail, trigger: 'blur' }\n      ],\n    },\n    createUserErrors: {\n      userName: '',\n      EMail:'',\n      password:'',\n      passwordConfirm:'',\n      phone:''\n    },\n    CUSTOMER: process.env.VUE_APP_CUSTOMER,\n    showLogo: process.env.VUE_APP_ShowLogo,\n    isSimple: process.env.VUE_APP_IsSimple\n    };\n  },\n  created() {\n    this.$title('登录');\n  },\n  computed: {\n    ...mapGetters(['isLogin']),\n    ...mapState(['siteTitle'])\n  },\n  methods: {\n    ...mapActions('user', ['handleUserLogin']),\n    dvRegister() {\n      window.location.href = '/Community/#/register?appPath='+ encodeURIComponent('/DealViewer/#/login');\n    },\n    handleCreateUser() {\n      const $form = this.$refs.createUserForm;\n      // $form.validate((valid) => {\n      //   if(valid) {\n      //     const {userName, password, passwordConfirm, EMail,phone} = this.createUserForm;\n\n      //     let item = `<item>`;\n      //      item += `<UserName>${userName}</UserName>`;\n      //      item += `<Email>${EMail}</Email>`;\n      //      item += `<DisplayName>${displayName}</DisplayName>`;\n      //      item += `<LoweredUserName>${userName.toLocaleLowerCase()}</LoweredUserName>`;\n      //      item += `<Password>${md5(password)}</Password>`;\n      //      item += `<Password>${md5(password)}</Password>`;\n      //      item += `</item>`;\n      //     let svc = this.$http(\n      //       'UserManagement',\n      //       'QuickFrame.usp_AddUser'\n      //     );\n      //     svc.AddParam({\n      //       Name: \"item\",\n      //       Value: item,\n      //       DBType: \"string\"\n      //     });\n      //     svc.ExecResult().then(res=>{\n      //       if(res === 3) {\n      //         this.createUserErrors.userName = '账号已存在，换一个试试';\n      //       }else{\n      //         this.$message.success('账号创建成功!');\n      //         $form.resetFields();\n      //         $form.clearValidate();\n      //       }\n      //     });\n      //   }\n      // });\n    },\n    handleSubmit() {\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          this.submitStatus = true;\n          if (this.errorMsg !== '') {\n            this.errorMsg = '';\n          }\n          if (this.captionErrorMsg !== '') {\n            this.captionErrorMsg = '';\n          }\n          // let param = {\n          //   loginName: \"'\"+this.form.email.trim()+\"'\",\n          //   Password: \"'\"+this.form.password+\"'\"\n          //   //captcha: '1E6046FC-5C78-43D4-9409-3F62BB2979EC',\n          //   //captcha: this.isSimple == '0' ? this.form.captcha : '1E6046FC-5C78-43D4-9409-3F62BB2979EC'\n          // };\n          let param = {\n            username: this.form.email.trim(),\n            password: md5(this.form.password),\n            //captcha: '1E6046FC-5C78-43D4-9409-3F62BB2979EC',\n            captcha: this.isSimple == '0' ? this.form.captcha : '1E6046FC-5C78-43D4-9409-3F62BB2979EC'\n\n          };\n          this.handleUserLogin(param).then((data) => {\n            this.submitStatus = false;\n            if(!data) {\n              this.captionErrorMsg = '您输入的验证码不正确！';\n              this.refreshCaptcha();\n              return;\n            }\n            let redirectURL = this.$route.query.redirectURL;\n\n            if (redirectURL !== undefined) {\n              this.$router.replace(redirectURL);\n            } else {\n              this.$router.push(this.isSimple == '0' ? \"/Product/ProductList\" : \"/quotation-analysis/index\");\n            }\n            cookie.set(keys.userInfo, JSON.stringify(data), {\n              path: '/'\n            });\n          }, () => {\n            this.errorMsg = '您输入的密码和账户名不匹配！';\n            this.captionErrorMsg = '';\n            this.refreshCaptcha();\n            this.submitStatus = false;\n          });\n        }\n      });\n    },\n    refreshCaptcha() {\n      this.captcha = captchaUrl + '?' +(Math.random() * 100)\n    }\n  },\n};\n\n",null]}