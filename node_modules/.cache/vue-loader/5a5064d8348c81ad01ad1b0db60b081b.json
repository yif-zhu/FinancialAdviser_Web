{"remainingRequest":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\views\\product\\PaymentSchedule.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\views\\product\\PaymentSchedule.vue","mtime":1604281047867},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ItemBox from '@/components/layout/ItemBox.vue';\nimport HChart from '@/components/common/Highcharts';\nexport default {\n  data() {\n    return {\n      scheduleData: [],\n      CurrentPeriodSel: 1,\n      chart1: null,\n      chart2: null,\n      form: {\n          StartTime: '',\n          EndTime: ''\n        }\n    };\n  },\n  components: {\n    ItemBox,\n    HChart\n  },\n  created() {\n    this.CurrentPeriodSel = this.CurrentPeriodAr.length > 0 ? this.CurrentPeriodAr[0] : 0;\n    this.initSchedule(this.CurrentPeriodSel);\n    this.initCompareChart();\n  },\n  computed: {\n    CurrentPeriodAr() {\n      var CurrentPeriodAr = [];\n      var CurrentPeriod = Number(this.$route.query.CurrentPeriod);\n      if (CurrentPeriod || CurrentPeriod == 0) {\n        for (var i = 0; i < CurrentPeriod + 1; i++) {\n          CurrentPeriodAr.push(i);\n        }\n      }\n      return CurrentPeriodAr;\n    },\n    TrustID() {\n      return this.$store.state.productInfo.trustId;\n    }\n  },\n  methods: {\n    PeriodChange(value) {\n      this.initSchedule(value);\n    },\n    initSchedule(CurrentPeriodSel) {\n      var PaymentPeriodID;\n      if (CurrentPeriodSel) {\n        PaymentPeriodID = CurrentPeriodSel;\n      } else {\n        PaymentPeriodID = this.CurrentPeriodSel;\n      }\n      var self = this;\n      var svc = this.$http('PortfolioManagement', 'DV.PaymentScheduleAggregation_Get');\n      svc.AddParam({\n        Name: 'TrustID',\n        Value: self.TrustID,\n        //Value: 9832,\n        DBType: 'int'\n      });\n      svc.AddParam({\n        Name: 'PaymentPeriodID',\n        Value: PaymentPeriodID, //4513,\n        DBType: 'int'\n      });\n      svc.ExecTable().then(res => {\n        this.scheduleData = res;\n      });\n    },\n     productSubjectChange() {\n        this.initCompareChart();\n      },\n    initCompareChart() {\n     let IsTopUpAvailable=null\n      Promise.all([this.getDataSource1(), this.getDataSource2()]).then(res => {\n        let date1 = res[0].map(v => v.startDate),\n          date2 = res[1].map(v => v.startDate);\n             let point =1,point2 =1,point3 =1,point4 =1\n           for (var i = 0; i < res[0].length; i++) {\n             //循环购买的产品，直接把这个资产池剩余去掉，只留资产池回收对比,目前获取的数据还不能算说明书的剩余\n               IsTopUpAvailable= res[0][i].IsTopUpAvailable\n               if(res[0][i].startDate==res[0][i].TrustStartDate)\n               (\n                    point=res[0][i].rn\n               )\n                if(res[0][i].startDate==res[0][i].PoolCloseDate)\n               (\n                  point2=res[0][i].rn\n               )\n\n           }\n\n           for (var i = 0; i < res[1].length; i++) {\n               if(res[1][i].startDate==res[1][i].TrustStartDate)\n               (\n                    point3=res[1][i].rn\n               )\n                if(res[1][i].startDate==res[1][i].PoolCloseDate)\n               (\n                  point4=res[1][i].rn\n               )\n\n           }\n\n        let dates = Array.from(new Set([].concat(date1, date2)));\n        this.chart1 = {\n          chart: {\n            type: 'line'\n          },\n          title: {\n            text: '资产池回收款'\n          },\n          subtitle: {\n            text: null\n          },\n          xAxis: {\n            categories: dates,\n            crosshair: true\n          },\n          yAxis: {\n            title: {\n              text: ''\n            },\n            labels : {\n              format:'{value} 亿元'\n            },\n          },\n            plotOptions: {\n                series: {\n                    marker: {\n                        radius: 3, //曲线点半径，默认是4\n                        symbol: 'diamond' //曲线点类型：”circle”, “square”, “diamond”, “triangle”,”triangle-down”，默认是”circle”\n                    }\n                }\n            },\n          tooltip: {\n            shared: true\n          },\n          series: [\n            {\n              name: '说明书',\n              data: res[0].map(v => v.RemainingPrincipal),\n              zoneAxis: 'x',\n              zones: [{\n                      value: point,\n                      color: '#7cb5ec',\n                      }, {\n                      value: point2,\n                      color: '#90ed7d'\n                      },{\n                      color: '#7cb5ec'\n                    }]\n              \n            },\n            {\n              name: '实际',\n              data: res[1].map(v => v.RemainingPrincipal),\n              zoneAxis: 'x',\n              zones: [{\n                      value: point,\n                      color: '#000000',\n                      }, {\n                      value: point2,\n                      color: '#90ed7d'\n                      },{\n                      color: '#000000'\n                    }]\n            }\n          ]\n        };\n        this.chart2 = {\n          chart: {\n            type: 'line'\n          },\n          title: {\n            text: '资产池剩余'\n          },\n          subtitle: {\n            text: null\n          },\n          xAxis: {\n            categories: dates,\n            crosshair: true\n          },\n          yAxis: {\n            title: {\n              text: ''\n            },\n            labels : {\n              format:'{value} %'\n            },\n            max: 100\n          },\n          tooltip: {\n            // head + 每个 point + footer 拼接成完整的 table\n            headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n            pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n            '<td style=\"padding:0\"><b>{point.y} %</b></td></tr>',\n            footerFormat: '</table>',\n            shared: true,\n            useHTML: true\n          },\n          series: [\n            {\n              name: '说明书',\n              data: res[0].map(v => parseFloat(v.Percentage)),\n              zoneAxis: 'x',\n              zones: [{\n                      value: point3,\n                      color: '#7cb5ec',\n                      }, {\n                      value: point4,\n                      color: '#90ed7d'\n                      },{\n                      color: '#7cb5ec'\n                    }]\n            },\n            {\n              name: '实际',\n              data: res[1].map(v => parseFloat(v.Percentage)),\n              zoneAxis: 'x',\n              zones: [{\n                      value: point3,\n                      color: '#000000',\n                      }, {\n                      value: point4,\n                      color: '#90ed7d'\n                      },{\n                      color: '#000000'\n                    }]\n            }\n          ]\n        };\n        if(IsTopUpAvailable==1)\n        {\n        this.chart2 =null;\n        } \n       \n      });\n    },\n    getDataSource1() {\n      let self = this;\n      const { StartTime, EndTime } = this.form;\n      var svc = this.$http('PortfolioManagement', '[TrustManagement].[usp_GetPaymentScheduleAggregationDateByTrustId]');\n      svc.AddParam({Name: 'StartTime', Value:StartTime,DBType: 'string'});\n      svc.AddParam({Name: 'EndTime', Value: EndTime,DBType: 'string'});\n      svc.AddParam({\n        Name: 'TrustID',\n        Value: this.TrustID,\n        DBType: 'int'\n      });\n      return svc.ExecTable();\n    },\n    getDataSource2() {\n      let self = this;\n      const { StartTime, EndTime } = this.form;\n      var svc = this.$http('PortfolioManagement', '[TrustManagement].[usp_GetFactAssetPoolPaymentDateByTrustId]');\n      svc.AddParam({\n        Name: 'TrustID',\n        Value: this.TrustID,\n        DBType: 'int'\n      });\n      svc.AddParam({Name: 'StartTime', Value:StartTime,DBType: 'string'});\n      svc.AddParam({Name: 'EndTime', Value: EndTime,DBType: 'string'});\n      return svc.ExecTable();\n    },\n    stateFormat(row, column, cellValue) {\n      if (cellValue == null || cellValue === '') {\n        return '';\n      } else {\n        cellValue += '';\n        if (!cellValue.includes('.')) cellValue += '.';\n        return cellValue\n          .replace(/(\\d)(?=(\\d{3})+\\.)/g, function($0, $1) {\n            return $1 + ',';\n          })\n          .replace(/\\.$/, '');\n      }\n    }\n  }\n};\n",{"version":3,"sources":["PaymentSchedule.vue"],"names":[],"mappingsfile":"PaymentSchedule.vue","sourceRoot":"src/views/product","sourcesContent":["<style scoped lang=\"scss\">\n.formclass\n{\n height: 50px; \n width: 100%;\n}\n .chart{\n   width: 100%;\n   overflow: hidden;\n    margin-top: 0px;\n    margin-left: -100%;\n  .box{\n    width: 50%;\n    display: inline-block;\n    padding:15px;\n    margin-top: 50px;\n    position: relative;\n    .shade{\n      position: absolute;\n      top: 10px;\n      left: 10px;\n      width: calc(100% - 20px);\n      height: calc(100% - 20px);\n      background-color: rgba(194,194,194,0.3);\n      text-align: center;\n      line-height: 400px;\n      font-size: 12px;\n      z-index: 9;\n      color: #888;\n    }\n    .tableIcon{\n      position: absolute;\n      right: 18px;\n      top: 0;\n      font-size: 20px;\n      color: #ccc;\n      z-index: 8;\n      cursor: pointer;\n      &:hover{\n        color: #70a1d4;\n      }\n      &.showIcon{\n        color: #70a1d4;\n      }\n    }\n    .tableDiv{\n      position: absolute;\n      top: 10px;\n      left: 10px;\n      width: calc(100% - 20px);\n      height: calc(100% - 20px);\n    }\n  }\n }\n</style>\n\n<template>\n  <div class=\"detailPage paymentSchedule\">\n    <ItemBox title=\"资产池现金流归集\">\n      <template slot=\"right\" v-if=\"CurrentPeriodAr.length > 0\">\n        <el-select v-model=\"CurrentPeriodSel\" placeholder=\"请选择\" @change=\"PeriodChange\">\n          <el-option v-for=\"item in CurrentPeriodAr\" :key=\"item\" :label=\"item === 0 ? '封包日' : item + '期'\" :value=\"item\"></el-option>\n        </el-select>\n      </template>\n      <el-table :data=\"scheduleData\" size=\"mini\" :empty-text=\"CurrentPeriodSel ? '未披露预测现金流' : '未披露归集现金流'\" height=\"500\">\n        <!-- <el-table-column prop=\"StartDate\" label=\"开始时间\" width=\"180\" v-if=\"CurrentPeriodSel==0\">\n        </el-table-column> -->\n        <el-table-column prop=\"EndDate\" label=\"日期\"></el-table-column>\n        <el-table-column prop=\"PrincipalAmount\" :formatter=\"stateFormat\" label=\"本金合计（元）\"></el-table-column>\n        <el-table-column prop=\"InterestAmount\" :formatter=\"stateFormat\" label=\"利息合计（元）\"></el-table-column>\n        <el-table-column prop=\"TotalAmount\" :formatter=\"stateFormat\" label=\"总计（元）\"></el-table-column>\n      </el-table>\n    </ItemBox>\n <div class=\"assetPerformance\">\n    <ItemBox title=\"现金流对比\">\n        <div class=\"formclass\" >\n            <el-form :inline=\"true\" :model=\"form\" class=\"demo-form-inline\">\n                      <el-form-item label=\"起始日：\">\n                        <el-date-picker   @change=\"productSubjectChange\"\n                          v-model=\"form.StartTime\"\n                          value-format=\"yyyy-MM-dd HH:mm:ss\">\n                        </el-date-picker>\n                      </el-form-item>\n                      <el-form-item label=\"终止日：\">\n                        <el-date-picker  @change=\"productSubjectChange\"\n                          v-model=\"form.EndTime\"\n                          value-format=\"yyyy-MM-dd HH:mm:ss\">\n                        </el-date-picker>\n                      </el-form-item>\n            </el-form>\n         </div> \n\n       <div class=\"chart\" >\n          <div class=\"box\">\n                <HChart :options=\"chart1\"></HChart>\n          </div>  \n             <div class=\"box\">\n                <HChart :options=\"chart2\"></HChart>\n          </div>       \n        </div>\n      </ItemBox>\n    </div>\n  </div>\n\n</template>\n\n<script>\nimport ItemBox from '@/components/layout/ItemBox.vue';\nimport HChart from '@/components/common/Highcharts';\nexport default {\n  data() {\n    return {\n      scheduleData: [],\n      CurrentPeriodSel: 1,\n      chart1: null,\n      chart2: null,\n      form: {\n          StartTime: '',\n          EndTime: ''\n        }\n    };\n  },\n  components: {\n    ItemBox,\n    HChart\n  },\n  created() {\n    this.CurrentPeriodSel = this.CurrentPeriodAr.length > 0 ? this.CurrentPeriodAr[0] : 0;\n    this.initSchedule(this.CurrentPeriodSel);\n    this.initCompareChart();\n  },\n  computed: {\n    CurrentPeriodAr() {\n      var CurrentPeriodAr = [];\n      var CurrentPeriod = Number(this.$route.query.CurrentPeriod);\n      if (CurrentPeriod || CurrentPeriod == 0) {\n        for (var i = 0; i < CurrentPeriod + 1; i++) {\n          CurrentPeriodAr.push(i);\n        }\n      }\n      return CurrentPeriodAr;\n    },\n    TrustID() {\n      return this.$store.state.productInfo.trustId;\n    }\n  },\n  methods: {\n    PeriodChange(value) {\n      this.initSchedule(value);\n    },\n    initSchedule(CurrentPeriodSel) {\n      var PaymentPeriodID;\n      if (CurrentPeriodSel) {\n        PaymentPeriodID = CurrentPeriodSel;\n      } else {\n        PaymentPeriodID = this.CurrentPeriodSel;\n      }\n      var self = this;\n      var svc = this.$http('PortfolioManagement', 'DV.PaymentScheduleAggregation_Get');\n      svc.AddParam({\n        Name: 'TrustID',\n        Value: self.TrustID,\n        //Value: 9832,\n        DBType: 'int'\n      });\n      svc.AddParam({\n        Name: 'PaymentPeriodID',\n        Value: PaymentPeriodID, //4513,\n        DBType: 'int'\n      });\n      svc.ExecTable().then(res => {\n        this.scheduleData = res;\n      });\n    },\n     productSubjectChange() {\n        this.initCompareChart();\n      },\n    initCompareChart() {\n     let IsTopUpAvailable=null\n      Promise.all([this.getDataSource1(), this.getDataSource2()]).then(res => {\n        let date1 = res[0].map(v => v.startDate),\n          date2 = res[1].map(v => v.startDate);\n             let point =1,point2 =1,point3 =1,point4 =1\n           for (var i = 0; i < res[0].length; i++) {\n             //循环购买的产品，直接把这个资产池剩余去掉，只留资产池回收对比,目前获取的数据还不能算说明书的剩余\n               IsTopUpAvailable= res[0][i].IsTopUpAvailable\n               if(res[0][i].startDate==res[0][i].TrustStartDate)\n               (\n                    point=res[0][i].rn\n               )\n                if(res[0][i].startDate==res[0][i].PoolCloseDate)\n               (\n                  point2=res[0][i].rn\n               )\n\n           }\n\n           for (var i = 0; i < res[1].length; i++) {\n               if(res[1][i].startDate==res[1][i].TrustStartDate)\n               (\n                    point3=res[1][i].rn\n               )\n                if(res[1][i].startDate==res[1][i].PoolCloseDate)\n               (\n                  point4=res[1][i].rn\n               )\n\n           }\n\n        let dates = Array.from(new Set([].concat(date1, date2)));\n        this.chart1 = {\n          chart: {\n            type: 'line'\n          },\n          title: {\n            text: '资产池回收款'\n          },\n          subtitle: {\n            text: null\n          },\n          xAxis: {\n            categories: dates,\n            crosshair: true\n          },\n          yAxis: {\n            title: {\n              text: ''\n            },\n            labels : {\n              format:'{value} 亿元'\n            },\n          },\n            plotOptions: {\n                series: {\n                    marker: {\n                        radius: 3, //曲线点半径，默认是4\n                        symbol: 'diamond' //曲线点类型：”circle”, “square”, “diamond”, “triangle”,”triangle-down”，默认是”circle”\n                    }\n                }\n            },\n          tooltip: {\n            shared: true\n          },\n          series: [\n            {\n              name: '说明书',\n              data: res[0].map(v => v.RemainingPrincipal),\n              zoneAxis: 'x',\n              zones: [{\n                      value: point,\n                      color: '#7cb5ec',\n                      }, {\n                      value: point2,\n                      color: '#90ed7d'\n                      },{\n                      color: '#7cb5ec'\n                    }]\n              \n            },\n            {\n              name: '实际',\n              data: res[1].map(v => v.RemainingPrincipal),\n              zoneAxis: 'x',\n              zones: [{\n                      value: point,\n                      color: '#000000',\n                      }, {\n                      value: point2,\n                      color: '#90ed7d'\n                      },{\n                      color: '#000000'\n                    }]\n            }\n          ]\n        };\n        this.chart2 = {\n          chart: {\n            type: 'line'\n          },\n          title: {\n            text: '资产池剩余'\n          },\n          subtitle: {\n            text: null\n          },\n          xAxis: {\n            categories: dates,\n            crosshair: true\n          },\n          yAxis: {\n            title: {\n              text: ''\n            },\n            labels : {\n              format:'{value} %'\n            },\n            max: 100\n          },\n          tooltip: {\n            // head + 每个 point + footer 拼接成完整的 table\n            headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n            pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n            '<td style=\"padding:0\"><b>{point.y} %</b></td></tr>',\n            footerFormat: '</table>',\n            shared: true,\n            useHTML: true\n          },\n          series: [\n            {\n              name: '说明书',\n              data: res[0].map(v => parseFloat(v.Percentage)),\n              zoneAxis: 'x',\n              zones: [{\n                      value: point3,\n                      color: '#7cb5ec',\n                      }, {\n                      value: point4,\n                      color: '#90ed7d'\n                      },{\n                      color: '#7cb5ec'\n                    }]\n            },\n            {\n              name: '实际',\n              data: res[1].map(v => parseFloat(v.Percentage)),\n              zoneAxis: 'x',\n              zones: [{\n                      value: point3,\n                      color: '#000000',\n                      }, {\n                      value: point4,\n                      color: '#90ed7d'\n                      },{\n                      color: '#000000'\n                    }]\n            }\n          ]\n        };\n        if(IsTopUpAvailable==1)\n        {\n        this.chart2 =null;\n        } \n       \n      });\n    },\n    getDataSource1() {\n      let self = this;\n      const { StartTime, EndTime } = this.form;\n      var svc = this.$http('PortfolioManagement', '[TrustManagement].[usp_GetPaymentScheduleAggregationDateByTrustId]');\n      svc.AddParam({Name: 'StartTime', Value:StartTime,DBType: 'string'});\n      svc.AddParam({Name: 'EndTime', Value: EndTime,DBType: 'string'});\n      svc.AddParam({\n        Name: 'TrustID',\n        Value: this.TrustID,\n        DBType: 'int'\n      });\n      return svc.ExecTable();\n    },\n    getDataSource2() {\n      let self = this;\n      const { StartTime, EndTime } = this.form;\n      var svc = this.$http('PortfolioManagement', '[TrustManagement].[usp_GetFactAssetPoolPaymentDateByTrustId]');\n      svc.AddParam({\n        Name: 'TrustID',\n        Value: this.TrustID,\n        DBType: 'int'\n      });\n      svc.AddParam({Name: 'StartTime', Value:StartTime,DBType: 'string'});\n      svc.AddParam({Name: 'EndTime', Value: EndTime,DBType: 'string'});\n      return svc.ExecTable();\n    },\n    stateFormat(row, column, cellValue) {\n      if (cellValue == null || cellValue === '') {\n        return '';\n      } else {\n        cellValue += '';\n        if (!cellValue.includes('.')) cellValue += '.';\n        return cellValue\n          .replace(/(\\d)(?=(\\d{3})+\\.)/g, function($0, $1) {\n            return $1 + ',';\n          })\n          .replace(/\\.$/, '');\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\">\n.paymentSchedule {\n  .itemBox {\n    height: calc(100% - 20px);\n    display: flex;\n    flex-direction: column;\n    .itemBox-title {\n      flex: 0 0 50px;\n    }\n    .itemBox-content {\n      display: flex;\n      flex: 1;\n      min-height: 0;\n\n      > .el-table--mini {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        > .el-table__header-wrapper {\n          flex-shrink: 0;\n        }\n        > .el-table__body-wrapper {\n          flex: 1;\n          overflow-y: auto;\n        }\n      }\n    }\n  }\n  // .chart-compare{\n  //   display: flex;\n  //   width: 100%;\n  //   justify-content: space-between;\n\n  //   .chart-wrap{\n  //     flex: 1 0 100%;\n  //     max-width: 100%;\n  //     overflow: hidden;\n    \n  // }\n}\n</style>\n"]}]}