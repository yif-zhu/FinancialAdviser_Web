{"remainingRequest":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\components\\layout\\AppHeader.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\components\\layout\\AppHeader.vue","mtime":1604574326447},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// import dataGrid from '@/components/common/DataGrid.vue';\nimport userImg from '@/assets/images/user.png'\nimport {mapState, mapMutations, mapMutions} from 'vuex';\nimport md5 from 'js-md5';\nexport default {\n  name: \"AppHeader\",\n  data() {\n    const validator = (rule, value, callback) => {\n      let test = /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,20}$/;\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      }else if (!(test.test(value))) {\n        callback(new Error('密码长度为8-20位，必须包括字母、数字'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      active: '1',\n      userImg:userImg,\n      modifyPasswordDialog: false,\n      passwordForm: {\n        oldPassword:'',\n        newPassword:'',\n        confirmPassword: ''\n      },\n      passwordRules: {\n        newPassword: [\n          { validator, trigger: 'blur' }\n        ],\n        confirmPassword: [\n          { validator, trigger: 'blur' }\n        ],\n      },\n      passwordErrors: {\n        oldPassword: '',\n        newPassword: '',\n        confirmPassword: '',\n      },\n      activeRead:'unread',\n      listOrder: 'TrustId desc',\n      listFilter: 'IsConcerned=1',\n      showTips: false,\n      showColorsEgg: false,\n      versionName : 'Kookaburra',\n      total: 0,\n      currentPage: 1,\n      pagesize: 10,\n      filterCheckType: '',\n      tableData: [],\n      CUSTOMER: process.env.VUE_APP_CUSTOMER,\n      showFollows: false\n    }\n  },\n  components:{\n    // dataGrid\n  },\n  computed: {\n    ...mapState('user',['userName', 'isRoot']),\n    ConcernTrust() {\n      return this.$store.state.productInfo.ConcernTrust\n    }\n  },\n  watch:{\n    ConcernTrust(v) {\n      if(this.$refs.refDataGrid) this.$refs.refDataGrid.refresh()\n    }\n  },\n  created() {\n    this.ConcernTrust_Get()\n  },\n  methods: {\n    // ...mapMutations('productInfo', ['setProductDetail','setConcernTrust'],['setLoginStatus']),\n    ...mapMutations(['setLoginStatus', 'productInfo/setProductDetail','productInfo/setConcernTrust']),\n    ConcernTrust_Get() {\n      var self = this;\n      var svc = this.$http('PortfolioManagement', 'DV.UserConcernTrust_Get');\n      svc.AddParam({\n        Name: 'UserName',\n        Value: self.userName,\n        DBType: 'string'\n      });\n      svc.ExecTable().then(res => {\n        self['productInfo/setConcernTrust'](res)\n      })\n    },\n    handleModifyUserPassword() {\n      const $form = this.$refs.passwordForm;\n      $form.validate((valid) => {\n        if(valid) {\n          const {\n            oldPassword,\n            newPassword,\n            confirmPassword\n          } = this.passwordForm;\n          if(oldPassword === newPassword) {\n            this.passwordErrors.newPassword = '请设置一个新的密码!';\n            return;\n          }\n          if(newPassword !== confirmPassword) {\n            this.passwordErrors.confirmPassword = '两次输入的密码不一致!';\n            return;\n          }\n\n          let svc = this.$http(\n            'UserManagement',\n            'QuickFrame.usp_ChangePasswordWithResult'\n          );\n          svc.AddParam({\n            Name: \"UserName\",\n            Value: this.userName,\n            DBType: \"string\"\n          });\n          svc.AddParam({\n            Name: \"OldPassword\",\n            Value: md5(oldPassword),\n            DBType: \"string\"\n          });\n          svc.AddParam({\n            Name: \"NewPassword\",\n            Value: md5(newPassword),\n            DBType: \"string\"\n          });\n          svc.ExecResult().then(res => {\n            if (res == 1) {\n              this.passwordErrors.oldPassword = '原密码不正确!';\n            }else{\n              this.$message.success('恭喜您，密码修改成功!');\n              this.modifyPasswordDialog = false;\n              $form.resetFields();\n              $form.clearValidate();\n            }\n          });\n        }\n      })\n    },\n    handleSetting(type) {\n      switch (type) {\n        case 'admin':\n          this.$router.push('/Admin');\n          break;\n        case 'logout':\n          this.$store.dispatch('user/handleUserLogout').then(()=>{\n            this.$router.push('/login');\n            this.setLoginStatus(false);\n          });\n          break;\n        case 'modifyPassword':\n          this.modifyPasswordDialog = true\n      }\n      //alert(type)\n    },\n  handleSizeChange(size) {\n    this.pagesize = size;\n    let currentPage=this.currentPage;\n    let pagesize= this.pagesize;\n    this.tableData = this.$allTableData.slice((currentPage-1)*pagesize,currentPage*pagesize);\n  },\n  handleCurrentChange(val) {\n    this.currentPage = val;\n    let currentPage=this.currentPage;\n    let pagesize= this.pagesize;\n    this.tableData = this.$allTableData.slice((currentPage-1)*pagesize,currentPage*pagesize);\n  },\n       moreFocusFun() {\n      this.$router.push({\n        path:'/ProductFocus/ProductList'\n      })\n    },\n\n  }\n}\n",null]}