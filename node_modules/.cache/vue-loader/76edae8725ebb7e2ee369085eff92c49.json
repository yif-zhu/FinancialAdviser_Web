{"remainingRequest":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\components\\common\\Pager.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\components\\common\\Pager.vue","mtime":1604664666221},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\n  import {\n    mapState\n  } from 'vuex';\n  export default {\n    name: 'Pager',\n    props: {\n      conname: {\n        type: String,\n        required: true\n      },\n      procname:{\n        type: String,\n        required:true\n      },\n      tablename: {\n        type: String,\n        required: true\n      },\n      filter: {\n        type: String\n      },\n      order: {\n        type: String\n      },\n      dataloaded: {\n        type: Function,\n        required: true\n      },\n      loadingswitcher: {\n        type: Function\n      },\n      pageSize: {\n        type: Number,\n        default: 20\n      },\n\t\t\tneedUserName:{\n\t\t\t\ttype: Boolean,\n\t\t\t\tdefault: false\n\t\t\t},\n      trustId:{\n        type: [Number,String],\n        default: 0\n      }\n    },\n    data() {\n      return {\n        current: 1,\n        total: 0,\n        size: 0\n      };\n    },\n    computed: {\n      ...mapState(['locale']),\n\t\t\t...mapState('user',['userName']),\n    },\n    watch: {\n      filter(newValue, oldValue) {\n        if (this.loadingswitcher && typeof this.loadingswitcher === 'function') {\n          this.loadingswitcher(true);\n        }\n        this.current = 1;\n        this.getListWithPager();\n      },\n      order(newValue, oldValue) {\n        if (this.loadingswitcher && typeof this.loadingswitcher === 'function') {\n          this.loadingswitcher(true);\n        }\n        this.getListWithPager();\n      },\n      pageSize(v) {\n        this.size = v;\n      }\n    },\n    mounted() {\n      this.size = this.pageSize;\n      this.getListWithProduct()\n      // switch (this.procname){\n      //   case 'Product': this.getListWithProduct(); break;\n      //   case 'Industry': this.getListWithIndustry(); break;\n      //   case 'Report': this.getListWithReport(); break;\n      //   case 'User': this.getListWithUser(); break;\n      //   case 'Role': this.getListWithRole(); break;\n      //   case 'Enterprise': this.getListWithEnterprise(); break;\n      //   case 'Log': this.getListWithLog(); break;\n      //   default: this.getListWithProduct();\n      // }\n    },\n    methods: {\n      getListWithProduct() {\n        var self = this;\n\n        var start = (this.current - 1) * this.size + 1;\n        var end = this.current * this.size;\n\n        var whstring = '';\n        if (this.filter) {\n          whstring += whstring ? ' and ' + this.filter : this.filter;\n        }\n\t\t\t\tvar svc='';\n        svc = this.$http(self.conname, \"QuickFinance.usp_GetDataWithPager\");\n\n        svc.AddParam({\n          Name: \"tableOrView\",\n          Value: self.tablename,\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: \"start\",\n          Value: start,\n          DBType: \"int\"\n        });\n        svc.AddParam({\n          Name: \"end\",\n          Value: end,\n          DBType: \"int\"\n        });\n        if (self.order) {\n          svc.AddParam({\n            Name: \"orderby\",\n            Value: self.order,\n            DBType: \"string\"\n          });\n        }\n        svc.AddParam({\n          Name: \"where\",\n          Value: whstring,\n          DBType: \"string\"\n        });\n        svc.ExecTable().then((ress) => {\n          if (ress) {\n            let res = {};\n            if (this.trustId) {\n              res.data = ress.data.filter((item) => {\n                return item.TrustId !== Number(this.trustId)\n              })\n              res.total = ress.total>0?ress.total - 1:ress.total\n            }else{\n              res = ress\n            }\n            //console.log(res)\n            self.total = parseInt(res.total);\n            self.dataloaded(res.data, res.total);\n            if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n              self.loadingswitcher(false);\n            }\n            self.$emit('tableScroll')\n          }\n        });\n      },\n      getListWithIndustry() {\n        var self = this;\n\n        var start = (this.current - 1) * this.size + 1;\n        var end = this.current * this.size;\n\n        var whstring = '';\n        //var whstring = \"AliasSet=N'\" + this.locale + \"'\";\n        if (this.filter) {\n          whstring += whstring ? ' and ' + this.filter : this.filter;\n        }\n        var svc='';\n          svc = this.$http(self.conname, \"QuickFinance.usp_GetDataWithPager\");\n\n        svc.AddParam({\n          Name: \"tableOrView\",\n          Value: self.tablename,\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: \"start\",\n          Value: start,\n          DBType: \"int\"\n        });\n        svc.AddParam({\n          Name: \"end\",\n          Value: end,\n          DBType: \"int\"\n        });\n        if (self.order) {\n          svc.AddParam({\n            Name: \"orderby\",\n            Value: self.order,\n            DBType: \"string\"\n          });\n        }\n        svc.AddParam({\n          Name: \"where\",\n          Value: whstring,\n          DBType: \"string\"\n        });\n        svc.ExecTable().then((ress) => {\n          if (ress) {\n            let res = {};\n            if (this.trustId) {\n              res.data = ress.data.filter((item) => {\n                return item.TrustId !== Number(this.trustId)\n              })\n              res.total = ress.total>0?ress.total - 1:ress.total\n            }else{\n              res = ress\n            }\n            //console.log(res)\n            self.total = parseInt(res.total);\n            self.dataloaded(res.data, res.total);\n            if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n              self.loadingswitcher(false);\n            }\n            self.$emit('tableScroll')\n          }\n        });\n      },\n      getListWithReport() {\n        var self = this;\n        var start = (this.current - 1) * this.size + 1;\n        var end = this.current * this.size;\n        var whstring = '';\n        if (this.filter) {\n          whstring += whstring ? ' and ' + this.filter : this.filter;\n        }\n        var svc='';\n        svc = this.$http(self.conname, \"QuickFinance.usp_GetDataWithPager\");\n\n        svc.AddParam({\n          Name: \"tableOrView\",\n          Value: self.tablename,\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: \"start\",\n          Value: start,\n          DBType: \"int\"\n        });\n        svc.AddParam({\n          Name: \"end\",\n          Value: end,\n          DBType: \"int\"\n        });\n        if (self.order) {\n          svc.AddParam({\n            Name: \"orderby\",\n            Value: self.order,\n            DBType: \"string\"\n          });\n        }\n        svc.AddParam({\n          Name: \"where\",\n          Value: whstring,\n          DBType: \"string\"\n        });\n        svc.ExecTable().then((ress) => {\n          if (ress) {\n            let res = {};\n            if (this.trustId) {\n              res.data = ress.data.filter((item) => {\n                return item.TrustId !== Number(this.trustId)\n              })\n              res.total = ress.total>0?ress.total - 1:ress.total\n            }else{\n              res = ress\n            }\n            //console.log(res)\n            self.total = parseInt(res.total);\n            self.dataloaded(res.data, res.total);\n            if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n              self.loadingswitcher(false);\n            }\n            self.$emit('tableScroll')\n          }\n        });\n      },\n      getListWithUser() {\n        var self = this;\n\n        var start = (this.current - 1) * this.size + 1;\n        var end = this.current * this.size;\n\n        var whstring = '';\n        //var whstring = \"AliasSet=N'\" + this.locale + \"'\";\n        if (this.filter) {\n          whstring += whstring ? ' and ' + this.filter : this.filter;\n        }\n        var svc='';\n\n        svc = this.$http(self.conname, \"QuickFinance.usp_GetDataWithPager\");\n        svc.AddParam({\n          Name: \"tableOrView\",\n          Value: self.tablename,\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: \"start\",\n          Value: start,\n          DBType: \"int\"\n        });\n        svc.AddParam({\n          Name: \"end\",\n          Value: end,\n          DBType: \"int\"\n        });\n        if (self.order) {\n          svc.AddParam({\n            Name: \"orderby\",\n            Value: self.order,\n            DBType: \"string\"\n          });\n        }\n        svc.AddParam({\n          Name: \"where\",\n          Value: whstring,\n          DBType: \"string\"\n        });\n        svc.ExecTable().then((ress) => {\n          if (ress) {\n            let res = {};\n            if (this.trustId) {\n              res.data = ress.data.filter((item) => {\n                return item.TrustId !== Number(this.trustId)\n              })\n              res.total = ress.total>0?ress.total - 1:ress.total\n            }else{\n              res = ress\n            }\n            //console.log(res)\n            self.total = parseInt(res.total);\n            self.dataloaded(res.data, res.total);\n            if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n              self.loadingswitcher(false);\n            }\n            self.$emit('tableScroll')\n          }\n        });\n      },\n      getListWithRole() {\n        var self = this;\n\n        var start = (this.current - 1) * this.size + 1;\n        var end = this.current * this.size;\n\n        var whstring = '';\n        //var whstring = \"AliasSet=N'\" + this.locale + \"'\";\n        if (this.filter) {\n          whstring += whstring ? ' and ' + this.filter : this.filter;\n        }\n        var svc='';\n        svc = this.$http(self.conname, \"QuickFinance.usp_GetDataWithPager\");\n\n        svc.AddParam({\n          Name: \"tableOrView\",\n          Value: self.tablename,\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: \"start\",\n          Value: start,\n          DBType: \"int\"\n        });\n        svc.AddParam({\n          Name: \"end\",\n          Value: end,\n          DBType: \"int\"\n        });\n        if (self.order) {\n          svc.AddParam({\n            Name: \"orderby\",\n            Value: self.order,\n            DBType: \"string\"\n          });\n        }\n        svc.AddParam({\n          Name: \"where\",\n          Value: whstring,\n          DBType: \"string\"\n        });\n        svc.ExecTable().then((ress) => {\n          if (ress) {\n            let res = {};\n            if (this.trustId) {\n              res.data = ress.data.filter((item) => {\n                return item.TrustId !== Number(this.trustId)\n              })\n              res.total = ress.total>0?ress.total - 1:ress.total\n            }else{\n              res = ress\n            }\n            //console.log(res)\n            self.total = parseInt(res.total);\n            self.dataloaded(res.data, res.total);\n            if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n              self.loadingswitcher(false);\n            }\n            self.$emit('tableScroll')\n          }\n        });\n      },\n      getListWithEnterprise() {\n        var self = this;\n\n        var start = (this.current - 1) * this.size + 1;\n        var end = this.current * this.size;\n\n        var whstring = '';\n        //var whstring = \"AliasSet=N'\" + this.locale + \"'\";\n        if (this.filter) {\n          whstring += whstring ? ' and ' + this.filter : this.filter;\n        }\n        var svc='';\n\n        svc = this.$http(self.conname, \"QuickFinance.usp_GetDataWithPager\");\n\n        // svc.AddParam({tableOrView: \"'\"+self.tablename+\"'\"});\n        // svc.AddParam({start:start});\n        // svc.AddParam({end:end});\n        // svc.AddParam({orderby:''});\n        // svc.AddParam({where:''});\n        // svc.AddParam({login_user:'0'});\n\n        svc.AddParam({\n          Name: \"tableOrView\",\n          Value: self.tablename,\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: \"start\",\n          Value: start,\n          DBType: \"int\"\n        });\n        svc.AddParam({\n          Name: \"end\",\n          Value: end,\n          DBType: \"int\"\n        });\n        if (self.order) {\n          svc.AddParam({\n            Name: \"orderby\",\n            Value: '',\n            DBType: \"string\"\n          });\n        }\n        svc.AddParam({\n          Name: \"where\",\n          Value: '',\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: 'login_user',\n          Value: '0',\n          DBType: 'string',\n        });\n        svc.AddParam({\n          Name: 'total',\n          Value: '0',\n          DBType: 'int',\n          IsOutput: true,\n          Size: 100\n        });\n        svc.ExecTable().then((ress) => {\n          if (ress) {\n            let res = {};\n            if (this.trustId) {\n              res.data = ress.data.filter((item) => {\n                return item.TrustId !== Number(this.trustId)\n              })\n              res.total = ress.total>0?ress.total - 1:ress.total\n            }else{\n              res = ress\n            }\n            //console.log(res)\n            self.total = parseInt(res.total);\n            self.dataloaded(res.data, res.total);\n            if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n              self.loadingswitcher(false);\n            }\n            self.$emit('tableScroll')\n          }\n        });\n      },\n      getListWithLog() {\n        var self = this;\n\n        var start = (this.current - 1) * this.size + 1;\n        var end = this.current * this.size;\n\n        var whstring = '';\n        //var whstring = \"AliasSet=N'\" + this.locale + \"'\";\n        if (this.filter) {\n          whstring += whstring ? ' and ' + this.filter : this.filter;\n        }\n        var svc='';\n\n        svc = this.$http(self.conname, \"QuickFinance.usp_GetDataWithPager\");\n\n        svc.AddParam({\n          Name: \"tableOrView\",\n          Value: self.tablename,\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: \"start\",\n          Value: start,\n          DBType: \"int\"\n        });\n        svc.AddParam({\n          Name: \"end\",\n          Value: end,\n          DBType: \"int\"\n        });\n        if (self.order) {\n          svc.AddParam({\n            Name: \"orderby\",\n            Value: self.order,\n            DBType: \"string\"\n          });\n        }\n        svc.AddParam({\n          Name: \"where\",\n          Value: whstring,\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: 'total',\n          Value: '0',\n          DBType: 'int',\n          IsOutput: true,\n          Size: 100\n        });\n        if(self.needUserName){\n          svc.AddParam({\n            Name: \"UserName\",\n            Value: self.userName,\n            DBType: \"string\"\n          });\n        }\n        if(self.bondCode.trim()){\n          svc.AddParam({\n            Name: \"ItemValue\",\n            Value: self.bondCode,\n            DBType: \"string\"\n          });\n        }\n        svc.ExecTable().then((ress) => {\n          if (ress) {\n            let res = {};\n            if (this.trustId) {\n              res.data = ress.data.filter((item) => {\n                return item.TrustId !== Number(this.trustId)\n              })\n              res.total = ress.total>0?ress.total - 1:ress.total\n            }else{\n              res = ress\n            }\n            //console.log(res)\n            self.total = parseInt(res.total);\n            self.dataloaded(res.data, res.total);\n            if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n              self.loadingswitcher(false);\n            }\n            self.$emit('tableScroll')\n          }\n        });\n      },\n      pageSizeChange(size) {\n        if (this.loadingswitcher && typeof this.loadingswitcher === 'function') {\n          this.loadingswitcher(true);\n        }\n        this.size = size;\n        this.current = 1;\n        this.getListWithPager();\n      },\n      pageIndexChange(index) {\n        if (this.loadingswitcher && typeof this.loadingswitcher === 'function') {\n          this.loadingswitcher(true);\n        }\n        this.current = index;\n        this.getListWithPager();\n      }\n    }\n  };\n\n",{"version":3,"sources":["Pager.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Pager.vue","sourceRoot":"src/components/common","sourcesContent":["<template>\n  <el-pagination @size-change=\"pageSizeChange\" @current-change=\"pageIndexChange\"\n    :current-page=\"current\" :page-size=\"size\" :page-sizes=\"[10,20,50,100]\" :pager-count=\"5\"\n    :total=\"total\" layout=\"total, sizes, prev, pager, next\">\n  </el-pagination>\n</template>\n\n<script>\n  import {\n    mapState\n  } from 'vuex';\n  export default {\n    name: 'Pager',\n    props: {\n      conname: {\n        type: String,\n        required: true\n      },\n      procname:{\n        type: String,\n        required:true\n      },\n      tablename: {\n        type: String,\n        required: true\n      },\n      filter: {\n        type: String\n      },\n      order: {\n        type: String\n      },\n      dataloaded: {\n        type: Function,\n        required: true\n      },\n      loadingswitcher: {\n        type: Function\n      },\n      pageSize: {\n        type: Number,\n        default: 20\n      },\n\t\t\tneedUserName:{\n\t\t\t\ttype: Boolean,\n\t\t\t\tdefault: false\n\t\t\t},\n      trustId:{\n        type: [Number,String],\n        default: 0\n      }\n    },\n    data() {\n      return {\n        current: 1,\n        total: 0,\n        size: 0\n      };\n    },\n    computed: {\n      ...mapState(['locale']),\n\t\t\t...mapState('user',['userName']),\n    },\n    watch: {\n      filter(newValue, oldValue) {\n        if (this.loadingswitcher && typeof this.loadingswitcher === 'function') {\n          this.loadingswitcher(true);\n        }\n        this.current = 1;\n        this.getListWithPager();\n      },\n      order(newValue, oldValue) {\n        if (this.loadingswitcher && typeof this.loadingswitcher === 'function') {\n          this.loadingswitcher(true);\n        }\n        this.getListWithPager();\n      },\n      pageSize(v) {\n        this.size = v;\n      }\n    },\n    mounted() {\n      this.size = this.pageSize;\n      this.getListWithProduct()\n      // switch (this.procname){\n      //   case 'Product': this.getListWithProduct(); break;\n      //   case 'Industry': this.getListWithIndustry(); break;\n      //   case 'Report': this.getListWithReport(); break;\n      //   case 'User': this.getListWithUser(); break;\n      //   case 'Role': this.getListWithRole(); break;\n      //   case 'Enterprise': this.getListWithEnterprise(); break;\n      //   case 'Log': this.getListWithLog(); break;\n      //   default: this.getListWithProduct();\n      // }\n    },\n    methods: {\n      getListWithProduct() {\n        var self = this;\n\n        var start = (this.current - 1) * this.size + 1;\n        var end = this.current * this.size;\n\n        var whstring = '';\n        if (this.filter) {\n          whstring += whstring ? ' and ' + this.filter : this.filter;\n        }\n\t\t\t\tvar svc='';\n        svc = this.$http(self.conname, \"QuickFinance.usp_GetDataWithPager\");\n\n        svc.AddParam({\n          Name: \"tableOrView\",\n          Value: self.tablename,\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: \"start\",\n          Value: start,\n          DBType: \"int\"\n        });\n        svc.AddParam({\n          Name: \"end\",\n          Value: end,\n          DBType: \"int\"\n        });\n        if (self.order) {\n          svc.AddParam({\n            Name: \"orderby\",\n            Value: self.order,\n            DBType: \"string\"\n          });\n        }\n        svc.AddParam({\n          Name: \"where\",\n          Value: whstring,\n          DBType: \"string\"\n        });\n        svc.ExecTable().then((ress) => {\n          if (ress) {\n            let res = {};\n            if (this.trustId) {\n              res.data = ress.data.filter((item) => {\n                return item.TrustId !== Number(this.trustId)\n              })\n              res.total = ress.total>0?ress.total - 1:ress.total\n            }else{\n              res = ress\n            }\n            //console.log(res)\n            self.total = parseInt(res.total);\n            self.dataloaded(res.data, res.total);\n            if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n              self.loadingswitcher(false);\n            }\n            self.$emit('tableScroll')\n          }\n        });\n      },\n      getListWithIndustry() {\n        var self = this;\n\n        var start = (this.current - 1) * this.size + 1;\n        var end = this.current * this.size;\n\n        var whstring = '';\n        //var whstring = \"AliasSet=N'\" + this.locale + \"'\";\n        if (this.filter) {\n          whstring += whstring ? ' and ' + this.filter : this.filter;\n        }\n        var svc='';\n          svc = this.$http(self.conname, \"QuickFinance.usp_GetDataWithPager\");\n\n        svc.AddParam({\n          Name: \"tableOrView\",\n          Value: self.tablename,\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: \"start\",\n          Value: start,\n          DBType: \"int\"\n        });\n        svc.AddParam({\n          Name: \"end\",\n          Value: end,\n          DBType: \"int\"\n        });\n        if (self.order) {\n          svc.AddParam({\n            Name: \"orderby\",\n            Value: self.order,\n            DBType: \"string\"\n          });\n        }\n        svc.AddParam({\n          Name: \"where\",\n          Value: whstring,\n          DBType: \"string\"\n        });\n        svc.ExecTable().then((ress) => {\n          if (ress) {\n            let res = {};\n            if (this.trustId) {\n              res.data = ress.data.filter((item) => {\n                return item.TrustId !== Number(this.trustId)\n              })\n              res.total = ress.total>0?ress.total - 1:ress.total\n            }else{\n              res = ress\n            }\n            //console.log(res)\n            self.total = parseInt(res.total);\n            self.dataloaded(res.data, res.total);\n            if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n              self.loadingswitcher(false);\n            }\n            self.$emit('tableScroll')\n          }\n        });\n      },\n      getListWithReport() {\n        var self = this;\n        var start = (this.current - 1) * this.size + 1;\n        var end = this.current * this.size;\n        var whstring = '';\n        if (this.filter) {\n          whstring += whstring ? ' and ' + this.filter : this.filter;\n        }\n        var svc='';\n        svc = this.$http(self.conname, \"QuickFinance.usp_GetDataWithPager\");\n\n        svc.AddParam({\n          Name: \"tableOrView\",\n          Value: self.tablename,\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: \"start\",\n          Value: start,\n          DBType: \"int\"\n        });\n        svc.AddParam({\n          Name: \"end\",\n          Value: end,\n          DBType: \"int\"\n        });\n        if (self.order) {\n          svc.AddParam({\n            Name: \"orderby\",\n            Value: self.order,\n            DBType: \"string\"\n          });\n        }\n        svc.AddParam({\n          Name: \"where\",\n          Value: whstring,\n          DBType: \"string\"\n        });\n        svc.ExecTable().then((ress) => {\n          if (ress) {\n            let res = {};\n            if (this.trustId) {\n              res.data = ress.data.filter((item) => {\n                return item.TrustId !== Number(this.trustId)\n              })\n              res.total = ress.total>0?ress.total - 1:ress.total\n            }else{\n              res = ress\n            }\n            //console.log(res)\n            self.total = parseInt(res.total);\n            self.dataloaded(res.data, res.total);\n            if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n              self.loadingswitcher(false);\n            }\n            self.$emit('tableScroll')\n          }\n        });\n      },\n      getListWithUser() {\n        var self = this;\n\n        var start = (this.current - 1) * this.size + 1;\n        var end = this.current * this.size;\n\n        var whstring = '';\n        //var whstring = \"AliasSet=N'\" + this.locale + \"'\";\n        if (this.filter) {\n          whstring += whstring ? ' and ' + this.filter : this.filter;\n        }\n        var svc='';\n\n        svc = this.$http(self.conname, \"QuickFinance.usp_GetDataWithPager\");\n        svc.AddParam({\n          Name: \"tableOrView\",\n          Value: self.tablename,\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: \"start\",\n          Value: start,\n          DBType: \"int\"\n        });\n        svc.AddParam({\n          Name: \"end\",\n          Value: end,\n          DBType: \"int\"\n        });\n        if (self.order) {\n          svc.AddParam({\n            Name: \"orderby\",\n            Value: self.order,\n            DBType: \"string\"\n          });\n        }\n        svc.AddParam({\n          Name: \"where\",\n          Value: whstring,\n          DBType: \"string\"\n        });\n        svc.ExecTable().then((ress) => {\n          if (ress) {\n            let res = {};\n            if (this.trustId) {\n              res.data = ress.data.filter((item) => {\n                return item.TrustId !== Number(this.trustId)\n              })\n              res.total = ress.total>0?ress.total - 1:ress.total\n            }else{\n              res = ress\n            }\n            //console.log(res)\n            self.total = parseInt(res.total);\n            self.dataloaded(res.data, res.total);\n            if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n              self.loadingswitcher(false);\n            }\n            self.$emit('tableScroll')\n          }\n        });\n      },\n      getListWithRole() {\n        var self = this;\n\n        var start = (this.current - 1) * this.size + 1;\n        var end = this.current * this.size;\n\n        var whstring = '';\n        //var whstring = \"AliasSet=N'\" + this.locale + \"'\";\n        if (this.filter) {\n          whstring += whstring ? ' and ' + this.filter : this.filter;\n        }\n        var svc='';\n        svc = this.$http(self.conname, \"QuickFinance.usp_GetDataWithPager\");\n\n        svc.AddParam({\n          Name: \"tableOrView\",\n          Value: self.tablename,\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: \"start\",\n          Value: start,\n          DBType: \"int\"\n        });\n        svc.AddParam({\n          Name: \"end\",\n          Value: end,\n          DBType: \"int\"\n        });\n        if (self.order) {\n          svc.AddParam({\n            Name: \"orderby\",\n            Value: self.order,\n            DBType: \"string\"\n          });\n        }\n        svc.AddParam({\n          Name: \"where\",\n          Value: whstring,\n          DBType: \"string\"\n        });\n        svc.ExecTable().then((ress) => {\n          if (ress) {\n            let res = {};\n            if (this.trustId) {\n              res.data = ress.data.filter((item) => {\n                return item.TrustId !== Number(this.trustId)\n              })\n              res.total = ress.total>0?ress.total - 1:ress.total\n            }else{\n              res = ress\n            }\n            //console.log(res)\n            self.total = parseInt(res.total);\n            self.dataloaded(res.data, res.total);\n            if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n              self.loadingswitcher(false);\n            }\n            self.$emit('tableScroll')\n          }\n        });\n      },\n      getListWithEnterprise() {\n        var self = this;\n\n        var start = (this.current - 1) * this.size + 1;\n        var end = this.current * this.size;\n\n        var whstring = '';\n        //var whstring = \"AliasSet=N'\" + this.locale + \"'\";\n        if (this.filter) {\n          whstring += whstring ? ' and ' + this.filter : this.filter;\n        }\n        var svc='';\n\n        svc = this.$http(self.conname, \"QuickFinance.usp_GetDataWithPager\");\n\n        // svc.AddParam({tableOrView: \"'\"+self.tablename+\"'\"});\n        // svc.AddParam({start:start});\n        // svc.AddParam({end:end});\n        // svc.AddParam({orderby:''});\n        // svc.AddParam({where:''});\n        // svc.AddParam({login_user:'0'});\n\n        svc.AddParam({\n          Name: \"tableOrView\",\n          Value: self.tablename,\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: \"start\",\n          Value: start,\n          DBType: \"int\"\n        });\n        svc.AddParam({\n          Name: \"end\",\n          Value: end,\n          DBType: \"int\"\n        });\n        if (self.order) {\n          svc.AddParam({\n            Name: \"orderby\",\n            Value: '',\n            DBType: \"string\"\n          });\n        }\n        svc.AddParam({\n          Name: \"where\",\n          Value: '',\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: 'login_user',\n          Value: '0',\n          DBType: 'string',\n        });\n        svc.AddParam({\n          Name: 'total',\n          Value: '0',\n          DBType: 'int',\n          IsOutput: true,\n          Size: 100\n        });\n        svc.ExecTable().then((ress) => {\n          if (ress) {\n            let res = {};\n            if (this.trustId) {\n              res.data = ress.data.filter((item) => {\n                return item.TrustId !== Number(this.trustId)\n              })\n              res.total = ress.total>0?ress.total - 1:ress.total\n            }else{\n              res = ress\n            }\n            //console.log(res)\n            self.total = parseInt(res.total);\n            self.dataloaded(res.data, res.total);\n            if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n              self.loadingswitcher(false);\n            }\n            self.$emit('tableScroll')\n          }\n        });\n      },\n      getListWithLog() {\n        var self = this;\n\n        var start = (this.current - 1) * this.size + 1;\n        var end = this.current * this.size;\n\n        var whstring = '';\n        //var whstring = \"AliasSet=N'\" + this.locale + \"'\";\n        if (this.filter) {\n          whstring += whstring ? ' and ' + this.filter : this.filter;\n        }\n        var svc='';\n\n        svc = this.$http(self.conname, \"QuickFinance.usp_GetDataWithPager\");\n\n        svc.AddParam({\n          Name: \"tableOrView\",\n          Value: self.tablename,\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: \"start\",\n          Value: start,\n          DBType: \"int\"\n        });\n        svc.AddParam({\n          Name: \"end\",\n          Value: end,\n          DBType: \"int\"\n        });\n        if (self.order) {\n          svc.AddParam({\n            Name: \"orderby\",\n            Value: self.order,\n            DBType: \"string\"\n          });\n        }\n        svc.AddParam({\n          Name: \"where\",\n          Value: whstring,\n          DBType: \"string\"\n        });\n        svc.AddParam({\n          Name: 'total',\n          Value: '0',\n          DBType: 'int',\n          IsOutput: true,\n          Size: 100\n        });\n        if(self.needUserName){\n          svc.AddParam({\n            Name: \"UserName\",\n            Value: self.userName,\n            DBType: \"string\"\n          });\n        }\n        if(self.bondCode.trim()){\n          svc.AddParam({\n            Name: \"ItemValue\",\n            Value: self.bondCode,\n            DBType: \"string\"\n          });\n        }\n        svc.ExecTable().then((ress) => {\n          if (ress) {\n            let res = {};\n            if (this.trustId) {\n              res.data = ress.data.filter((item) => {\n                return item.TrustId !== Number(this.trustId)\n              })\n              res.total = ress.total>0?ress.total - 1:ress.total\n            }else{\n              res = ress\n            }\n            //console.log(res)\n            self.total = parseInt(res.total);\n            self.dataloaded(res.data, res.total);\n            if (self.loadingswitcher && typeof self.loadingswitcher === 'function') {\n              self.loadingswitcher(false);\n            }\n            self.$emit('tableScroll')\n          }\n        });\n      },\n      pageSizeChange(size) {\n        if (this.loadingswitcher && typeof this.loadingswitcher === 'function') {\n          this.loadingswitcher(true);\n        }\n        this.size = size;\n        this.current = 1;\n        this.getListWithPager();\n      },\n      pageIndexChange(index) {\n        if (this.loadingswitcher && typeof this.loadingswitcher === 'function') {\n          this.loadingswitcher(true);\n        }\n        this.current = index;\n        this.getListWithPager();\n      }\n    }\n  };\n\n</script>\n"]}]}