{"remainingRequest":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\views\\product\\CashInFlow.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\views\\product\\CashInFlow.vue","mtime":1604281225823},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport advFilter from '@/components/common/AdvanceFilter.vue'\nimport dataGrid from '@/components/common/DataGrid.vue';\nimport dynamicTab from '@/mixins/dynamicTab.js';\nimport FileSaver from 'file-saver';\nimport ItemBox from '@/components/layout/ItemBox.vue';\nimport XLSX from 'xlsx';\nimport {mapState, mapMutations} from 'vuex';\nimport {\n  addClass,\n  removeClass,\n  hasClass\n} from '@/utils/dom.js'\nexport default {\n\tdata() {\n\t\treturn {\n      data: [],\n      payment1:true\n\t\t}\n\t},\n\tcomponents:{\n    ItemBox\n  },\n\tcomputed:{\n\t\tTrustID() {\n      return this.$store.state.productInfo.trustId;\n    },\n\t},\n\tcreated() {\n\t\tthis.initInflow()\n\t},\n\tmethods:{\n\t\tinitInflow() {\n\t\t\tvar self = this;\n      var svc = this.$http('PortfolioManagement', 'DV.usp_GetPoolCashInflowSimpleByTrustId');\n      svc.AddParam({\n        Name: 'TrustID',\n        Value: self.TrustID, //4513,\n        DBType: 'int'\n      });\n      svc.ExecTable().then(res => {\n        this.data = res;\n      })\n    },\n    exportExcel () {\n       /* out-table关联导出的dom节点  */\n       var wb = XLSX.utils.table_to_book(document.querySelector('#out-table'))\n       /* get binary string as output */\n       var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'array' })\n       try {\n           FileSaver.saveAs(new Blob([wbout], { type: 'application/octet-stream' }), '现金流流入.xlsx')\n       } catch (e) { if (typeof console !== 'undefined') console.log(e, wbout) }\n       return wbout\n    },\n\t\tstateFormat(row, column, cellValue) {\n\t\t\tif(cellValue == null){\n\t\t\t\treturn ''\n\t\t\t}else{\n\t\t\t\tlet money = cellValue != 'ND'?Number(cellValue).toFixed(2).toString().replace(/(\\d{1,3})(?=(\\d{3})+(?:$|\\.))/g, \"$&,\"):cellValue\n        return money;\n\t\t\t}\n\t\t},\n\t}\n}\n",{"version":3,"sources":["CashInFlow.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CashInFlow.vue","sourceRoot":"src/views/product","sourcesContent":["<template>\n  <div class=\"detailPage\">\n  \t<ItemBox title=\"现金流流入\" class=\"baseItemBox\">\n      <template slot=\"right\">\n        <el-button  size=\"mini\" type=\"primary\" @click=\"exportExcel\" plain style=\"position: absolute;right: 60px;top: 20px;\"><i class=\"iconfont icon-xiazai1\" style=\"margin-right:5px;\"></i>现金流流入导出</el-button>\n        <span class=\"flodText\" @click=\"payment1 = !payment1\">{{!payment1?'展开':'收起'}}</span>\n      </template>\n      <el-table :data=\"data\" size=\"mini\"  id=\"out-table\" v-show=\"payment1\">\n        <el-table-column prop=\"期数\" label=\"期数\" width=80>\n        </el-table-column>\n        <el-table-column prop=\"处置中资产\" label=\"处置中资产\" :formatter=\"stateFormat\" min-width=140>\n        </el-table-column>\n        <el-table-column prop=\"本期处置完毕资产\" label=\"本期处置完毕资产\" :formatter=\"stateFormat\" min-width=140>\n        </el-table-column>\n        <el-table-column prop=\"流动性支持资金\" label=\"流动性支持资金\" :formatter=\"stateFormat\" min-width=140>\n        </el-table-column>\n        <el-table-column prop=\"其他收入\" label=\"其他收入\" :formatter=\"stateFormat\" min-width=140>\n        </el-table-column>\n        <el-table-column prop=\"合格投资\" label=\"合格投资\" :formatter=\"stateFormat\" min-width=140>\n        </el-table-column>\n        <el-table-column prop=\"季度结息\" label=\"季度结息\" :formatter=\"stateFormat\" min-width=140>\n        </el-table-column>\n        <el-table-column prop=\"合计\" label=\"合计\" :formatter=\"stateFormat\" min-width=140>\n        </el-table-column>\n      </el-table>\n  \t</ItemBox>\n  </div>\n</template>\n\n<script>\n  import advFilter from '@/components/common/AdvanceFilter.vue'\n  import dataGrid from '@/components/common/DataGrid.vue';\n  import dynamicTab from '@/mixins/dynamicTab.js';\n  import FileSaver from 'file-saver';\n  import ItemBox from '@/components/layout/ItemBox.vue';\n  import XLSX from 'xlsx';\n  import {mapState, mapMutations} from 'vuex';\n  import {\n    addClass,\n    removeClass,\n    hasClass\n  } from '@/utils/dom.js'\n  export default {\n  \tdata() {\n  \t\treturn {\n        data: [],\n        payment1:true\n  \t\t}\n  \t},\n  \tcomponents:{\n      ItemBox\n    },\n  \tcomputed:{\n  \t\tTrustID() {\n        return this.$store.state.productInfo.trustId;\n      },\n  \t},\n  \tcreated() {\n  \t\tthis.initInflow()\n  \t},\n  \tmethods:{\n  \t\tinitInflow() {\n  \t\t\tvar self = this;\n        var svc = this.$http('PortfolioManagement', 'DV.usp_GetPoolCashInflowSimpleByTrustId');\n        svc.AddParam({\n          Name: 'TrustID',\n          Value: self.TrustID, //4513,\n          DBType: 'int'\n        });\n        svc.ExecTable().then(res => {\n          this.data = res;\n        })\n      },\n      exportExcel () {\n         /* out-table关联导出的dom节点  */\n         var wb = XLSX.utils.table_to_book(document.querySelector('#out-table'))\n         /* get binary string as output */\n         var wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'array' })\n         try {\n             FileSaver.saveAs(new Blob([wbout], { type: 'application/octet-stream' }), '现金流流入.xlsx')\n         } catch (e) { if (typeof console !== 'undefined') console.log(e, wbout) }\n         return wbout\n      },\n  \t\tstateFormat(row, column, cellValue) {\n  \t\t\tif(cellValue == null){\n  \t\t\t\treturn ''\n  \t\t\t}else{\n  \t\t\t\tlet money = cellValue != 'ND'?Number(cellValue).toFixed(2).toString().replace(/(\\d{1,3})(?=(\\d{3})+(?:$|\\.))/g, \"$&,\"):cellValue\n          return money;\n  \t\t\t}\n  \t\t},\n  \t}\n  }\n</script>\n\n<style>\n</style>\n"]}]}