{"remainingRequest":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\components\\BaseDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\src\\components\\BaseDialog.vue","mtime":1604281045581},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yif_z\\Desktop\\DealViewer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nconst Popup = require('element-ui/lib/utils/popup').default;\nconst Migrating = require('element-ui/lib/mixins/migrating').default;\nconst emitter = require('element-ui/lib/mixins/emitter').default;\n\nconst on = function (el, event, handle) {\n    if('addEventListener' in document) {\n        el.addEventListener(event, handle, false);\n    }else{\n        el.attachEvent('on'+event, handle);\n    }\n};\n\nconst off = function (el, event, handle) {\n    if('removeEventListener' in document) {\n        el.removeEventListener(event, handle, false);\n    }else{\n        el.detachEvent('on'+event, handle);\n    }\n};\n\nexport default {\n    name: 'BaseDialog',\n\n    mixins: [Popup, emitter, Migrating],\n\n    props: {\n        title: {\n            type: String,\n            default: ''\n        },\n\n        modal: {\n            type: Boolean,\n            default: true\n        },\n\n        modalAppendToBody: {\n            type: Boolean,\n            default: true\n        },\n\n        appendToBody: {\n            type: Boolean,\n            default: false\n        },\n\n        lockScroll: {\n            type: Boolean,\n            default: true\n        },\n\n        closeOnClickModal: {\n            type: Boolean,\n            default: true\n        },\n\n        closeOnPressEscape: {\n            type: Boolean,\n            default: true\n        },\n\n        showClose: {\n            type: Boolean,\n            default: true\n        },\n\n        showFullscreen: {\n            type: Boolean,\n            default: true\n        },\n\n        fullscreen: Boolean,\n\n        width: String,\n\n        customClass: {\n            type: String,\n            default: ''\n        },\n\n        top: {\n            type: String,\n            default: '15vh'\n        },\n        beforeClose: Function,\n        center: {\n            type: Boolean,\n            default: false\n        },\n\n        // 是否允许拖拽\n        draggable: {\n            type: Boolean,\n            default: false\n        },\n    },\n\n    data() {\n        return {\n            closed: false,\n            defaultFullScreen: false,\n            dragData: {\n                // 矩形的X轴\n                rectX: null,\n                // 矩形的Y轴\n                rectY: null,\n                // 当前拖拽点在矩形中的位置\n                dragX: null,\n                // 当前拖拽点在矩形中的位置\n                dragY: null,\n                // 剩余可偏移X轴\n                offsetX: null,\n                // 是否正在拖拽\n                dragging: false\n            }\n        };\n    },\n\n    watch: {\n        visible(val) {\n            if (val) {\n                this.closed = false;\n                this.$emit('open');\n                this.$el.addEventListener('scroll', this.updatePopper);\n                this.$nextTick(() => {\n                    this.$refs.dialog.scrollTop = 0;\n                });\n                if (this.appendToBody) {\n                    document.body.appendChild(this.$el);\n                }\n            } else {\n                this.$el.removeEventListener('scroll', this.updatePopper);\n                if (!this.closed) this.$emit('close');\n            }\n        },\n        fullscreen(val) {\n            if(val) {\n                this.defaultFullScreen = true;\n            }\n        },\n        defaultFullScreen() {\n            this.$emit('onResize',true);\n        }\n    },\n\n    computed: {\n        wrapStyle() {\n            let style = {};\n\n            if(this.dragData.rectX !== null || this.defaultFullScreen) {\n                style.marginTop = '0';\n            } else {\n                if(this.width) {\n                    style.width = this.width;\n                }\n                style.marginTop = this.top;\n            }\n            return style;\n        },\n        dialogStyle() {\n            let style = {};\n            if(!this.defaultFullScreen) {\n                if (this.width) {\n                    style.width = this.dragData.rectX !== null ? this.width : '100%';\n                }\n                if (this.draggable) {\n                    if (this.dragData.rectX !== null || this.dragData.rectY !== null) {\n                        style.position = 'absolute';\n                        style.marginTop = false;\n                    }\n                    if (this.dragData.rectX !== null) style.left = `${this.dragData.rectX}px`;\n                    if (this.dragData.rectY !== null) style.top = `${this.dragData.rectY}px`;\n                }\n            }else{\n                style.marginTop = false;\n            }\n            return style;\n        }\n    },\n\n    methods: {\n        handleMoveStart (event) {\n            if (!this.draggable) return false;\n            // 屏蔽鼠标右键，没有人会用右键拖拽，除非鼠标坏了\n            if (event.button === 2) return false;\n            const dialog = this.$refs.dialog;\n            const rect = dialog.getBoundingClientRect();\n\n            this.dragData.rectX = rect.x;\n            this.dragData.rectY = rect.y;\n\n            this.dragData.dragX = event.clientX - rect.x;\n            this.dragData.dragY = event.clientY - rect.y;\n\n            this.dragData.offsetX = this.$el.clientWidth - dialog.clientWidth;\n            this.dragData.dragging = true;\n\n            on(window, 'mousemove', this.handleMoveMove);\n            on(window, 'mouseup', this.handleMoveEnd);\n        },\n        handleMoveMove (event) {\n            if (!this.dragData.dragging) return false;\n\n            let {dragX, dragY, offsetX} = this.dragData;\n\n            let left = event.clientX - dragX,\n                top = event.clientY - dragY;\n\n            if(left < 0) {\n                left = 0;\n            }\n            if(top < 0) {\n                top = 0;\n            }\n            if (left > offsetX) {\n                left = offsetX;\n            }\n\n            this.dragData.rectX = left;\n            this.dragData.rectY = top;\n\n        },\n        handleMoveEnd () {\n            this.dragData.dragging = false;\n            off(window, 'mousemove', this.handleMoveMove);\n            off(window, 'mouseup', this.handleMoveEnd);\n        },\n        handleWrapperClick() {\n            if (!this.closeOnClickModal) return;\n            this.handleClose();\n        },\n        handleClose() {\n            if (typeof this.beforeClose === 'function') {\n                this.beforeClose(this.hide);\n            } else {\n                this.hide();\n            }\n        },\n        handleFullscreen() {\n            this.defaultFullScreen = !this.defaultFullScreen;\n            this.$emit('onFullscreen', this.defaultFullScreen);\n        },\n        hide(cancel) {\n            if (cancel !== false) {\n                this.$emit('update:visible', false);\n                this.$emit('close');\n                this.closed = true;\n                if(!this.fullscreen && this.defaultFullScreen) {\n                    this.defaultFullScreen = false;\n                }\n            }\n        },\n        updatePopper() {\n            this.broadcast('ElSelectDropdown', 'updatePopper');\n            this.broadcast('ElDropdownMenu', 'updatePopper');\n        },\n        afterLeave() {\n            this.$emit('closed');\n        }\n    },\n\n    mounted() {\n        if (this.visible) {\n            this.rendered = true;\n            this.open();\n            if (this.appendToBody) {\n                document.body.appendChild(this.$el);\n            }\n        }\n\n        if (this.fullscreen) {\n            this.defaultFullScreen = true;\n        }\n    },\n\n    destroyed() {\n        // if appendToBody is true, remove DOM node after destroy\n        if (this.appendToBody && this.$el && this.$el.parentNode) {\n            this.$el.parentNode.removeChild(this.$el);\n        }\n    }\n};\n",{"version":3,"sources":["BaseDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BaseDialog.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <transition name=\"dialog-fade\"\n            @after-leave=\"afterLeave\">\n        <div class=\"el-dialog__wrapper\"\n             v-show=\"visible\"\n             @click.self=\"handleWrapperClick\">\n            <div class=\"dialog-draggable-wrap\" :style=\"wrapStyle\" :class=\"[{ 'is-fullscreen': defaultFullScreen}]\">\n                <div class=\"el-dialog\"\n                     :class=\"[{ 'is-fullscreen': defaultFullScreen, 'el-dialog--center': center }, customClass]\"\n                     ref=\"dialog\"\n                     :style=\"dialogStyle\">\n                    <div class=\"el-dialog__header is-base-dialog\">\n                        <div class=\"el-dialog__header-inner\"\n                             :class=\"{dragging: draggable && dragData.dragging}\"\n                             @mousedown=\"handleMoveStart\">\n                            <slot name=\"title\">\n                                <span class=\"el-dialog__title\">{{ title }}</span>\n                            </slot>\n                        </div>\n                        <button type=\"button\"\n                                class=\"el-dialog__headerbtn el-dialog__fullscreenbtn\"\n                                aria-label=\"Fullscreen\"\n                                v-if=\"showFullscreen\"\n                                @click=\"handleFullscreen\">\n                            <i class=\"el-dialog__fullscreen el-icon-full-screen\" v-show=\"!defaultFullScreen\"></i>\n                            <i class=\"el-dialog__fullscreen el-icon-copy-document\" v-show=\"defaultFullScreen\"></i>\n                        </button>\n                        <button type=\"button\"\n                                class=\"el-dialog__headerbtn\"\n                                aria-label=\"Close\"\n                                v-if=\"showClose\"\n                                @click=\"handleClose\">\n                            <i class=\"el-dialog__close el-icon el-icon-close\"></i>\n                        </button>\n                    </div>\n                    <div class=\"el-dialog__body\" v-if=\"rendered\"><slot></slot></div>\n                    <div class=\"el-dialog__footer\" v-if=\"$slots.footer\">\n                        <slot name=\"footer\"></slot>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </transition>\n</template>\n\n<script>\n    const Popup = require('element-ui/lib/utils/popup').default;\n    const Migrating = require('element-ui/lib/mixins/migrating').default;\n    const emitter = require('element-ui/lib/mixins/emitter').default;\n\n    const on = function (el, event, handle) {\n        if('addEventListener' in document) {\n            el.addEventListener(event, handle, false);\n        }else{\n            el.attachEvent('on'+event, handle);\n        }\n    };\n\n    const off = function (el, event, handle) {\n        if('removeEventListener' in document) {\n            el.removeEventListener(event, handle, false);\n        }else{\n            el.detachEvent('on'+event, handle);\n        }\n    };\n\n    export default {\n        name: 'BaseDialog',\n\n        mixins: [Popup, emitter, Migrating],\n\n        props: {\n            title: {\n                type: String,\n                default: ''\n            },\n\n            modal: {\n                type: Boolean,\n                default: true\n            },\n\n            modalAppendToBody: {\n                type: Boolean,\n                default: true\n            },\n\n            appendToBody: {\n                type: Boolean,\n                default: false\n            },\n\n            lockScroll: {\n                type: Boolean,\n                default: true\n            },\n\n            closeOnClickModal: {\n                type: Boolean,\n                default: true\n            },\n\n            closeOnPressEscape: {\n                type: Boolean,\n                default: true\n            },\n\n            showClose: {\n                type: Boolean,\n                default: true\n            },\n\n            showFullscreen: {\n                type: Boolean,\n                default: true\n            },\n\n            fullscreen: Boolean,\n\n            width: String,\n\n            customClass: {\n                type: String,\n                default: ''\n            },\n\n            top: {\n                type: String,\n                default: '15vh'\n            },\n            beforeClose: Function,\n            center: {\n                type: Boolean,\n                default: false\n            },\n\n            // 是否允许拖拽\n            draggable: {\n                type: Boolean,\n                default: false\n            },\n        },\n\n        data() {\n            return {\n                closed: false,\n                defaultFullScreen: false,\n                dragData: {\n                    // 矩形的X轴\n                    rectX: null,\n                    // 矩形的Y轴\n                    rectY: null,\n                    // 当前拖拽点在矩形中的位置\n                    dragX: null,\n                    // 当前拖拽点在矩形中的位置\n                    dragY: null,\n                    // 剩余可偏移X轴\n                    offsetX: null,\n                    // 是否正在拖拽\n                    dragging: false\n                }\n            };\n        },\n\n        watch: {\n            visible(val) {\n                if (val) {\n                    this.closed = false;\n                    this.$emit('open');\n                    this.$el.addEventListener('scroll', this.updatePopper);\n                    this.$nextTick(() => {\n                        this.$refs.dialog.scrollTop = 0;\n                    });\n                    if (this.appendToBody) {\n                        document.body.appendChild(this.$el);\n                    }\n                } else {\n                    this.$el.removeEventListener('scroll', this.updatePopper);\n                    if (!this.closed) this.$emit('close');\n                }\n            },\n            fullscreen(val) {\n                if(val) {\n                    this.defaultFullScreen = true;\n                }\n            },\n            defaultFullScreen() {\n                this.$emit('onResize',true);\n            }\n        },\n\n        computed: {\n            wrapStyle() {\n                let style = {};\n\n                if(this.dragData.rectX !== null || this.defaultFullScreen) {\n                    style.marginTop = '0';\n                } else {\n                    if(this.width) {\n                        style.width = this.width;\n                    }\n                    style.marginTop = this.top;\n                }\n                return style;\n            },\n            dialogStyle() {\n                let style = {};\n                if(!this.defaultFullScreen) {\n                    if (this.width) {\n                        style.width = this.dragData.rectX !== null ? this.width : '100%';\n                    }\n                    if (this.draggable) {\n                        if (this.dragData.rectX !== null || this.dragData.rectY !== null) {\n                            style.position = 'absolute';\n                            style.marginTop = false;\n                        }\n                        if (this.dragData.rectX !== null) style.left = `${this.dragData.rectX}px`;\n                        if (this.dragData.rectY !== null) style.top = `${this.dragData.rectY}px`;\n                    }\n                }else{\n                    style.marginTop = false;\n                }\n                return style;\n            }\n        },\n\n        methods: {\n            handleMoveStart (event) {\n                if (!this.draggable) return false;\n                // 屏蔽鼠标右键，没有人会用右键拖拽，除非鼠标坏了\n                if (event.button === 2) return false;\n                const dialog = this.$refs.dialog;\n                const rect = dialog.getBoundingClientRect();\n\n                this.dragData.rectX = rect.x;\n                this.dragData.rectY = rect.y;\n\n                this.dragData.dragX = event.clientX - rect.x;\n                this.dragData.dragY = event.clientY - rect.y;\n\n                this.dragData.offsetX = this.$el.clientWidth - dialog.clientWidth;\n                this.dragData.dragging = true;\n\n                on(window, 'mousemove', this.handleMoveMove);\n                on(window, 'mouseup', this.handleMoveEnd);\n            },\n            handleMoveMove (event) {\n                if (!this.dragData.dragging) return false;\n\n                let {dragX, dragY, offsetX} = this.dragData;\n\n                let left = event.clientX - dragX,\n                    top = event.clientY - dragY;\n\n                if(left < 0) {\n                    left = 0;\n                }\n                if(top < 0) {\n                    top = 0;\n                }\n                if (left > offsetX) {\n                    left = offsetX;\n                }\n\n                this.dragData.rectX = left;\n                this.dragData.rectY = top;\n\n            },\n            handleMoveEnd () {\n                this.dragData.dragging = false;\n                off(window, 'mousemove', this.handleMoveMove);\n                off(window, 'mouseup', this.handleMoveEnd);\n            },\n            handleWrapperClick() {\n                if (!this.closeOnClickModal) return;\n                this.handleClose();\n            },\n            handleClose() {\n                if (typeof this.beforeClose === 'function') {\n                    this.beforeClose(this.hide);\n                } else {\n                    this.hide();\n                }\n            },\n            handleFullscreen() {\n                this.defaultFullScreen = !this.defaultFullScreen;\n                this.$emit('onFullscreen', this.defaultFullScreen);\n            },\n            hide(cancel) {\n                if (cancel !== false) {\n                    this.$emit('update:visible', false);\n                    this.$emit('close');\n                    this.closed = true;\n                    if(!this.fullscreen && this.defaultFullScreen) {\n                        this.defaultFullScreen = false;\n                    }\n                }\n            },\n            updatePopper() {\n                this.broadcast('ElSelectDropdown', 'updatePopper');\n                this.broadcast('ElDropdownMenu', 'updatePopper');\n            },\n            afterLeave() {\n                this.$emit('closed');\n            }\n        },\n\n        mounted() {\n            if (this.visible) {\n                this.rendered = true;\n                this.open();\n                if (this.appendToBody) {\n                    document.body.appendChild(this.$el);\n                }\n            }\n\n            if (this.fullscreen) {\n                this.defaultFullScreen = true;\n            }\n        },\n\n        destroyed() {\n            // if appendToBody is true, remove DOM node after destroy\n            if (this.appendToBody && this.$el && this.$el.parentNode) {\n                this.$el.parentNode.removeChild(this.$el);\n            }\n        }\n    };\n</script>"]}]}